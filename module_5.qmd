---
title: "Linear Algebra for Advanced Applications"
execute: 
  enabled: true
jupyter: python3
---

## Singular Value Decomposition (SVD) â€“ An Intuitive and Mathematical Approach

Singular Value Decomposition (SVD) is one of the most powerful matrix factorization tools in linear algebra, extensively used in areas like data compression, signal processing, machine learning, and more. SVD generalizes the concept of diagonalization to non-square matrices, decomposing any $m \times n$ matrix $A$ into three matrices with well-defined geometric interpretations.

## The SVD Theorem

For any real or complex $m \times n$ matrix $A$, SVD states that:

$$
A = U \Sigma V^T
$$

Where:
- $U$ is an $m \times m$ orthogonal matrix (or unitary in the complex case),
- $\Sigma$ is an $m \times n$ diagonal matrix, with non-negative real numbers (the singular values of $A$) on the diagonal,
- $V^T$ is the transpose (or conjugate transpose in the complex case) of an $n \times n$ orthogonal matrix $V$.

These are range and null spaces for both the column and the row spaces.

\begin{align}
%
  \mathbf{C}^{n} &= 
    \color{blue}{\mathcal{R} \left( \mathbf{A}^{*} \right)} \oplus
    \color{red}{\mathcal{N} \left( \mathbf{A} \right)} \\
%
  \mathbf{C}^{m} &= 
    \color{blue}{\mathcal{R} \left( \mathbf{A} \right)} \oplus
    \color{red} {\mathcal{N} \left( \mathbf{A}^{*} \right)}
%
\end{align}

The singular value decomposition provides an orthonormal basis for the four fundamental subspaces.



## Intuition Behind SVD

The SVD can be understood geometrically:
- The columns of $V$ form an orthonormal basis of the input space.
- The matrix $\Sigma$ scales and transforms this space along the principal axes.
- The columns of $U$ form an orthonormal basis of the output space, representing how the transformed vectors in the input space map to the output space.

SVD essentially performs three steps on any vector $x$:
1. **Rotation**: $V^T$ aligns $x$ with the principal axes.

2. **Scaling**: $\Sigma$ scales along these axes.

3. **Rotation**: $U$ maps the result back to the output space.

## Spectral Decomposition vs. SVD

- **Spectral Decomposition** (also known as **Eigendecomposition**) applies to **square** matrices and decomposes a matrix $A$ into $A = Q \Lambda Q^{-1}$, where $Q$ is an orthogonal matrix of eigenvectors, and $\Lambda$ is a diagonal matrix of eigenvalues.
- **SVD**, on the other hand, applies to **any** matrix (square or rectangular) and generalizes this idea by using singular values (which are always non-negative) instead of eigenvalues.

### Comparison:

- **Eigenvectors and Eigenvalues**: Spectral decomposition only works if $A$ is square and diagonalizable. It gives insight into the properties of a matrix (e.g., whether it is invertible).
- **Singular Vectors and Singular Values**: SVD works for any matrix and provides a more general and stable decomposition, useful even for non-square matrices.

## Steps to Find $U$, $\Sigma$, and $V^T$

Given a matrix $A$, the SVD factors $U$, $\Sigma$, and $V^T$ can be computed as follows:

1. **Compute $A^T A$ and find the eigenvalues and eigenvectors:**

   - The matrix $V$ is formed from the eigenvectors of $A^T A$.

   - The singular values $\sigma_i$ are the square roots of the eigenvalues of $A^T A$.
   
2. **Construct $\Sigma$:**

   - $\Sigma$ is a diagonal matrix where the non-zero entries are the singular values $\sigma_1, \sigma_2, \dots$, arranged in decreasing order.
   
3. **Compute $A A^T$ and find the eigenvectors:**

   - The matrix $U$ is formed from the eigenvectors of $A A^T$.
   
4. **Transpose $V$:**

   - The matrix $V^T$ is simply the transpose of $V$.

## Example

Let's consider a simple example where $A$ is a $2 \times 2$ matrix:

$$
A = \begin{pmatrix} 3 & 1 \\ 1 & 3 \end{pmatrix}
$$

### Step 1: Compute $A^T A$

$$
A^T A = \begin{pmatrix} 3 & 1 \\ 1 & 3 \end{pmatrix} \begin{pmatrix} 3 & 1 \\ 1 & 3 \end{pmatrix} = \begin{pmatrix} 10 & 6 \\ 6 & 10 \end{pmatrix}
$$

Find the eigenvalues of $A^T A$:

$$
\det(A^T A - \lambda I) = \det\begin{pmatrix} 10 - \lambda & 6 \\ 6 & 10 - \lambda \end{pmatrix} = 0
$$

$$
(10 - \lambda)^2 - 36 = 0 \quad \Rightarrow \quad \lambda = 16, \lambda = 4
$$

The eigenvalues of $A^T A$ are $16$ and $4$, so the singular values of $A$ are $\sigma_1 = 4$ and $\sigma_2 = 2$.

### Step 2: Find $V$ from the eigenvectors of $A^T A$

Solve $(A^T A - \lambda I)v = 0$ for each eigenvalue:

- For $\lambda = 16$, the eigenvector is $v_1 = \begin{pmatrix} 1 \\ 1 \end{pmatrix}$,
- For $\lambda = 4$, the eigenvector is $v_2 = \begin{pmatrix} -1 \\ 1 \end{pmatrix}$.

Thus, 

$$
V = \begin{pmatrix} 1/\sqrt{2} & -1/\sqrt{2} \\ 1/\sqrt{2} & 1/\sqrt{2} \end{pmatrix}
$$

### Step 3: Construct $\Sigma$

The singular values $\sigma_1 = 4$ and $\sigma_2 = 2$, so:

$$
\Sigma = \begin{pmatrix} 4 & 0 \\ 0 & 2 \end{pmatrix}
$$

### Step 4: Find $U$ from the eigenvectors of $A A^T$

Similarly, compute $A A^T$:

$$
A A^T = \begin{pmatrix} 3 & 1 \\ 1 & 3 \end{pmatrix} \begin{pmatrix} 3 & 1 \\ 1 & 3 \end{pmatrix} = \begin{pmatrix} 10 & 6 \\ 6 & 10 \end{pmatrix}
$$

Solve for the eigenvectors of $A A^T$ (same as $A^T A$):

The eigenvectors are $u_1 = \begin{pmatrix} 1/\sqrt{2} \\ 1/\sqrt{2} \end{pmatrix}$ and $u_2 = \begin{pmatrix} -1/\sqrt{2} \\ 1/\sqrt{2} \end{pmatrix}$.

Thus,

$$
U = \begin{pmatrix} 1/\sqrt{2} & -1/\sqrt{2} \\ 1/\sqrt{2} & 1/\sqrt{2} \end{pmatrix}
$$

### Step 5: Final SVD

We can now write the SVD of $A$ as:

$$
A = U \Sigma V^T
$$

Where:

$$
U = \begin{pmatrix} 1/\sqrt{2} & -1/\sqrt{2} \\ 1/\sqrt{2} & 1/\sqrt{2} \end{pmatrix}, \quad \Sigma = \begin{pmatrix} 4 & 0 \\ 0 & 2 \end{pmatrix}, \quad V^T = \begin{pmatrix} 1/\sqrt{2} & 1/\sqrt{2} \\ -1/\sqrt{2} & 1/\sqrt{2} \end{pmatrix}
$$

`Python` code to find SVD of this example is given below.

```{python}
import numpy as np

# Define the matrix A
A = np.array([[3, 1],
              [1, 3]])

# Perform SVD decomposition
U, Sigma, VT = np.linalg.svd(A)

# Create Sigma matrix from singular values
Sigma_matrix = np.zeros((A.shape[0], A.shape[1]))
np.fill_diagonal(Sigma_matrix, Sigma)

# Print results
print("Matrix A:")
print(A)
print("\nU matrix:")
print(U)
print("\nSigma matrix:")
print(Sigma_matrix)
print("\nV^T matrix:")
print(VT)

# Verify the decomposition A = U * Sigma * V^T
A_reconstructed = U @ Sigma_matrix @ VT
print("\nReconstructed A (U * Sigma * V^T):")
print(A_reconstructed)
```

## Reconstructing Matrix $A$ Using SVD

Given the Singular Value Decomposition (SVD) of a matrix $A$, the matrix can be reconstructed as a linear combination of low-rank matrices using the left singular vectors $u_i$, singular values $\sigma_i$, and the right singular vectors $v_i^T$.

The formula to reconstruct the matrix $A$ is:

$$
A = \sum_{i=1}^{r} \sigma_i \, u_i \, v_i^T
$$

where:
- $r$ is the rank of the matrix $A$ (i.e., the number of non-zero singular values),
- $\sigma_i$ is the $i$-th singular value from the diagonal matrix $\Sigma$,
- $u_i$ is the $i$-th column of the matrix $U$ (left singular vectors),
- $v_i^T$ is the transpose of the $i$-th row of the matrix $V^T$ (right singular vectors).

### Breakdown of Terms:
- $u_i \in \mathbb{R}^m$ is a column vector from the matrix $U$ (size $m \times 1$),
- $v_i^T \in \mathbb{R}^n$ is a row vector from the matrix $V^T$ (size $1 \times n$),
- $\sigma_i \in \mathbb{R}$ is a scalar representing the $i$-th singular value.

Each term $\sigma_i u_i v_i^T$ represents a **rank-1 matrix** (the outer product of two vectors). The sum of these rank-1 matrices reconstructs the original matrix $A$.

### Example:

For a matrix $A$, its SVD is represented as:

$$
A = U \Sigma V^T = \sum_{i=1}^{r} \sigma_i \, u_i \, v_i^T
$$

If the rank of $A$ is 2, then the reconstructed form of $A$ would be:

$$
A = \sigma_1 u_1 v_1^T + \sigma_2 u_2 v_2^T
$$

Each term $\sigma_i u_i v_i^T$ corresponds to a **low-rank approximation** that contributes to the final matrix. By summing these terms, the full matrix $A$ is obtained.

Python code demonstrating reconstruction is given below:

```{python}
import numpy as np

# Define the matrix A and convert it to float64
A = np.array([[3, 1], 
              [1, 3]], dtype=np.float64)

# Perform SVD
U, Sigma, VT = np.linalg.svd(A)

# Reconstruct A using the singular values and singular vectors
A_reconstructed = np.zeros_like(A)  # This will be float64 now
for i in range(len(Sigma)-1):
    A_reconstructed += Sigma[i] * np.outer(U[:, i], VT[i, :])

print("Original matrix A:")
print(A)

print("\nReconstructed A from rank-1 matrices:")
print(A_reconstructed)

```

## Singular Value Decomposition in Image Processing

###  Image Compression

SVD is widely used for compressing images. By approximating an image with a lower rank matrix, significant amounts of data can be reduced without a substantial loss in quality. The largest singular values and their corresponding singular vectors are retained, allowing for effective storage and transmission.

###  Noise Reduction

SVD helps in denoising images by separating noise from the original image data. By reconstructing the image using only the most significant singular values and vectors, the impact of noise (often associated with smaller singular values) can be minimized, resulting in a clearer image.

###  Image Reconstruction
In applications where parts of an image are missing or corrupted, SVD can facilitate reconstruction. By analyzing the singular values and vectors, missing data can be inferred and filled in, preserving the structural integrity of the image.

###  Facial Recognition
SVD is employed in facial recognition systems as a means to extract features. By decomposing facial images into their constituent parts, SVD helps identify key features that distinguish different faces, enhancing recognition accuracy.

###  Image Segmentation
In image segmentation, SVD can aid in clustering pixels based on their attributes. By reducing dimensionality, it helps identify distinct regions in an image, facilitating the separation of objects and backgrounds.

###  Color Image Processing
SVD can be applied to color images by treating each color channel separately. This allows for efficient manipulation, compression, and analysis of color images, improving overall processing performance.

###  Pattern Recognition
SVD is utilized in pattern recognition tasks where it helps to identify and classify patterns within images. By simplifying the data representation, SVD enhances the efficiency and accuracy of recognition algorithms.

### Example

```{python}
from PIL import Image
import urllib.request
import matplotlib.pyplot as plt
urllib.request.urlretrieve(
  'http://lenna.org/len_top.jpg',
   "input.jpg")

img = Image.open("input.jpg")
```

```{python}
# convert to grayscale
imggray = img.convert('LA')
plt.figure(figsize=(8,6))
plt.imshow(imggray);
```

```{python}
# creating image histogram
import pandas as pd
import numpy as np
imgmat = np.array(list(imggray.getdata(band=0)), float)
A=pd.Series(imgmat)
A.hist(bins=20)
```

```{python}
# printing the pixel values
print(imgmat)
```

```{python}
# dimension of the gray scale image matrix
imgmat.shape
```
```{python}
##loading an image and show it using matrices of pixel values
from skimage import io
f = "http://lenna.org/len_top.jpg" #url of the image
a = io.imread(f) # read the image to a tensor
c1=a[:,:,0] # channel 1
c2=a[:,:,1] # channel 2
c3=a[:,:,2] # channel 3
print(c1)
# dimension of channel-1
c1.shape
```

```{python}
fig = plt.figure(figsize=(12, 3))
ax1 = fig.add_subplot(131)
ax2 = fig.add_subplot(132)
ax3 = fig.add_subplot(133)
ax1.imshow(c1, cmap='gray', vmin = 0, vmax = 255,interpolation='none')
ax2.imshow(c2, cmap='gray', vmin = 0, vmax = 255,interpolation='none')
ax3.imshow(c3, cmap='gray', vmin = 0, vmax = 255,interpolation='none')
plt.show()
```

```{python}
c1_array=np.array(list(c1)).reshape(-1)
pd.Series(c1_array).hist()
```

```{python}
## an application of matrix addition
plt.imshow(0.34*c1-0.2*c2-0.01*c3, cmap='gray', vmin = 0, vmax = 255,interpolation='none')
plt.show()
```

```{python}
#converting a grayscale image to numpy array
imgmat = np.array(list(imggray.getdata(band=0)), float)
imgmat.shape = (imggray.size[1], imggray.size[0])
imgmat = np.matrix(imgmat)
plt.figure(figsize=(8,6))
plt.imshow(imgmat, cmap='gray');
```
As promised, one line of command is enough to get the singular value decomposition. $U$ and $V$ are the left-hand side and the right-hand side matrices, respectively. 'sigma' is a vector containing the diagonal entries of the matrix $\Sigma$ The other two lines reconstruct the matrix using the first singular value only. You can already guess the rough shape of the original image.

```{python}
U, sigma, V = np.linalg.svd(imgmat)

reconstimg = np.matrix(U[:, :1]) * np.diag(sigma[:1]) * np.matrix(V[:1, :])
plt.imshow(reconstimg, cmap='gray');
```

Let's see what we get when we use the second, third and fourth singular value as well.

```{python}
for i in range(2, 4):
    reconstimg = np.matrix(U[:, :i]) * np.diag(sigma[:i]) * np.matrix(V[:i, :])
    plt.imshow(reconstimg, cmap='gray')
    title = "n = %s" % i
    plt.title(title)
    plt.show()
```

Now we let $i$ run from 5 to 51, using a step width of 5. For $i=50$, we already get a pretty good image!

```{python}
for i in range(5, 51, 5):
    reconstimg = np.matrix(U[:, :i]) * np.diag(sigma[:i]) * np.matrix(V[:i, :])
    plt.imshow(reconstimg, cmap='gray')
    title = "n = %s" % i
    plt.title(title)
    plt.show()
```

But how many singular values do we have after all? The following command gives us the number of entries in sigma. As it is the diagonal matrix, it is stored as a vector and we do not save the zero entries. We now output the number of singular values (the length of the vector sigma, containing the diagonal entries), as well as the size of the matrices $U$ and $V$.

```{python}
print("We have %d singular values." % sigma.shape)
print("U is of size", U.shape, ".")
print("V is of size", V.shape, ".")
print("The last, or smallest entry in sigma is", sigma[224])
```

As Python stores the whole singular value decomposition, we do not really save space. But as you saw in the first theoretical exercise of the 10th series, we do not have to compute the whole matrices $U$ and $V$ if we know that we only want to reconstruct the rank $k$ approximation. How many numbers do you have to store for the initial matrix of the picture? How many numbers do you have to store if you want to reconstruct the rank $k$ approximation only?

Use the following Cell to find an $i$ large enough that you are satisfied with the quality of the image. Check, how much percent of the initial size you have to store. If your picture has a different resolution, you will have to correct the terms.

```{python}
i = 10
reconstimg = np.matrix(U[:, :i]) * np.diag(sigma[:i]) * np.matrix(V[:i, :])
plt.imshow(reconstimg, cmap='gray')
title = "n = %s" % i
plt.title(title)
plt.show()

numbers = 400*i + i + 225* i
print("For this quality, we have to store %d numbers." % numbers)
```
If you really want to have a good quality, say you want to reconstruct using $r - 1$ singular values, where $r$ is the total number of singular values, is it still a good idea to use the singular value decomposition?


```{python}
i = 30
reconstimg = np.matrix(U[:, :i]) * np.diag(sigma[:i]) * np.matrix(V[:i, :])
plt.imshow(reconstimg, cmap='gray')
title = "n = %s" % i
plt.title(title)
plt.show()

```

## Takeaway

Singular Value Decomposition provides a general framework for decomposing any matrix into orthogonal components, revealing the underlying structure of the matrix. SVD has numerous applications in machine learning, signal processing, and more. The method to find the matrices $U$, $\Sigma$, and $V^T$ involves using the eigenvalues and eigenvectors of $A^T A$ and $A A^T$.

