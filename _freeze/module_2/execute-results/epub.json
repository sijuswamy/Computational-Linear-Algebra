{
  "hash": "4843887b36b8e2b3c1ac301f5eeb7116",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Transforming Linear Algebra to Computational Language\"\nexecute: \n  enabled: true\njupyter: python3\n---\n\n\n\n\n\n\n\n## Introduction \n\nIn the first module, we established a solid foundation in matrix algebra by exploring pseudocode and implementing fundamental matrix operations using `Python`. We practiced key concepts such as matrix addition, subtraction, multiplication, and determinants through practical examples in image processing, leveraging the `SymPy` library for symbolic computation. \n\nAs we begin the second module, **\"Transforming Linear Algebra to Computational Language,\"** our focus will shift towards applying these concepts with greater depth and actionable insight. This module is designed to bridge the theoretical knowledge from matrix algebra with practical computational applications. You will learn to interpret and utilize matrix operations, solve systems of equations, and analyze the rank of matrices within a variety of real-world contexts. \n\nA new concept we will introduce is the **Rank-Nullity Theorem**, which provides a fundamental relationship between the rank of a matrix and the dimensions of its null space. This theorem is crucial for understanding the solution spaces of linear systems and the properties of linear transformations. By applying this theorem, you will be able to gain deeper insights into the structure of solutions and the behavior of matrix transformations.\n\nThis transition will not only reinforce your understanding of linear algebra but also enhance your ability to apply these concepts effectively in computational settings. Through engaging examples and practical exercises, you will gain valuable experience in transforming abstract mathematical principles into tangible solutions, setting a strong groundwork for advanced computational techniques.\n\n## Relearning of Terms and Operations in Linear Algebra\n\nIn this section, we will revisit fundamental matrix operations such as addition, subtraction, scaling, and more through practical examples. Our goal is to transform theoretical linear algebra into modern computational applications. We will demonstrate these concepts using `Python`, focusing on practical and industrial applications.\n\n### Matrix Addition and Subtraction in Data Analysis\n\nMatrix addition and subtraction are fundamental operations that help in combining datasets and analyzing differences. \n\n**Simple Example: Combining Quarterly Sales Data**\n\nWe begin with quarterly sales data from different regions and combine them to get the total sales. The sales data is given in @tbl-qtb. A ar plot of the total sales is shown in [Fig @fig-total1].\n\n\n| Region | Q1   | Q2   | Q3   | Q4   |\n|--------|------|------|------|------|\n| A      | 2500 | 2800 | 3100 | 2900 |\n| B      | 1500 | 1600 | 1700 | 1800 |\n\n: Quarterly Sales Data {#tbl-qtb}\n\n**From Scratch `Python` Implementation:**\n\n::: {#cell-fig-total1 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Quarterly sales data\nsales_region_a = np.array([2500, 2800, 3100, 2900])\nsales_region_b = np.array([1500, 1600, 1700, 1800])\n\n# Combine sales data\ntotal_sales = sales_region_a + sales_region_b\n\n# Visualization\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nplt.bar(quarters, total_sales, color='skyblue')\nplt.xlabel('Quarter')\nplt.ylabel('Total Sales')\nplt.title('Combined Quarterly Sales Data for Regions A and B')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Computing Total Sales using `Numpy` aggregation method](module_2_files/figure-epub/fig-total1-output-1.png){#fig-total1}\n:::\n:::\n\n\nIn the above `Python` code, we have performed the aggregation operation with the `NumPy` method. Same can be done in a more data analysis style using `pandas` inorder to handle tabular data meaningfully. In this approach, quarterly sales data of each region is stored as `DataFrames`(like an excel sheet). The we combine these two `DataFrames` into one. After that create a new row with index 'Total' and populate this row with sum of quarterly sales in Region A and Region B. Finally a bar plot is created using this 'Total' sales. Advantage of this approach is that we don't need the `matplotlib` library to create visualizations!. The EDA using this approach is shown in [Fig @fig-tot2].\n\n::: {#cell-fig-tot2 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# DataFrames for quarterly sales data\ndf_a = pd.DataFrame({'Q1': [2500], 'Q2': [2800], 'Q3': [3100], 'Q4': [2900]}, index=['Region A'])\ndf_b = pd.DataFrame({'Q1': [1500], 'Q2': [1600], 'Q3': [1700], 'Q4': [1800]}, index=['Region B'])\n\n# Combine data\ndf_combined = df_a.add(df_b, fill_value=0)\ndf_combined.loc[\"Total\"] = df_combined.sum(axis=0)\n# Visualization\ndf_combined.loc[\"Total\"].plot(kind='bar', color=['green'])\nplt.xlabel('Quarter')\nplt.ylabel('Total Sales')\nplt.title('Combined Quarterly Sales Data for Regions A and B')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Computation of Total Sales using `Pandas` method](module_2_files/figure-epub/fig-tot2-output-1.png){#fig-tot2}\n:::\n:::\n\n\nWe can extend this in to more advanced examples. Irrespective to the size of the data, for representation and aggregation tasks matrix models are best options and are used in industry as a standard. Let us consider an advanced example to analyse difference in stock prices. For this example we are using a simulated data. The python code for this simulation process is shown in [Fig @fig-sim].\n\n::: {#cell-fig-sim .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Simulated observed and predicted stock prices\nobserved_prices = np.random.uniform(100, 200, size=(100, 5))\npredicted_prices = np.random.uniform(95, 210, size=(100, 5))\n\n# Calculate the difference matrix\nprice_differences = observed_prices - predicted_prices\n\n# Visualization\nplt.imshow(price_differences, cmap='coolwarm', aspect='auto')\nplt.colorbar()\nplt.title('Stock Price Differences')\nplt.xlabel('Stock Index')\nplt.ylabel('Day Index')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Demonstration of Stock Price simulated from a Uniform Distribution](module_2_files/figure-epub/fig-sim-output-1.png){#fig-sim}\n:::\n:::\n\n\nAnother important matrix operation relevant to data analytics and Machine Learning application is scaling. This is considered as a statistical tool to make various features (attributes) in to same scale so as to avoid unnecessary misleading impact in data analysis and its intepretation. In Machine Learning context, this pre-processing stage is inevitable so as to make the model relevant and usable. \n\n**Simple Example: Normalizing Employee Performance Data**\n\n\n| Employee | Metric A   | Metric B   | \n|--------|--------------|------------|\n| X      | 80           | 700        | \n| Y      | 90           | 800        | \n| Z      |100           |900         |\n| A      |110           |1000        |\n| B      |120           |1100        |\n\n: Employee Performance Data {#tbl-EPD}\n\nUsing simple python code we can simulate the model for `min-max` scaling. The formula for `min-max` scaling is:\n$$min_max(X)=\\dfrac{X-min(X)}{max(X)-min(X)}$$\n\nFor example, while applying the `min-max` scaling in the first value of Metric A, the scaled value is \n$$min_max(80)\\dfrac{80-80}{120-80}=0$$ \n\nSimilarly\n\n$$min_max(100)\\dfrac{100-80}{120-80}=0.5$$\n\nWhen we apply this formula to Metric A and Metric B, the scaled output from @tbl-EPD will be as follows:\n\n| Employee | Metric A   | Metric B   | \n|--------|--------------|------------|\n| X      | 0.00         | 0.00       | \n| Y      | 0.25         | 0.25       | \n| Z      | 0.50         | 0.50       |\n| A      | 0.75         | 0.75       |\n| B      | 1.00         | 1.00       |\n\n: Employee Performance Data {#tbl-EPDu}\n\nIt is interesting to look into the scaled data! In the orginal table (@tbl-EPD) it is looked like Metric B is superior. But from the scaled table (@tbl-EPDu), it is clear that both the Metrics are representing same relative information. This will help us to identify the redundency in measure and so skip any one of the Metric before analysis!.\n\nThe same can be achieved through a matrix operation. The `Python` implementation of this scaling process is shown in [Fig @fig-totalsales].\n\n::: {#cell-fig-totalsales .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Employee performance data with varying scales\ndata = np.array([[80, 700], [90, 800], [100, 900], [110, 1000], [120, 1100]])\n\n# Manual scaling\nmin_vals = np.min(data, axis=0)\nmax_vals = np.max(data, axis=0)\nscaled_data = (data - min_vals) / (max_vals - min_vals)\n\n# Visualization\nplt.figure(figsize=(8, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(data, cmap='viridis')\nplt.title('Original Data')\nplt.colorbar()\n\nplt.subplot(1, 2, 2)\nplt.imshow(scaled_data, cmap='viridis')\nplt.title('Scaled Data')\nplt.colorbar()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Total sales using `pandas` method](module_2_files/figure-epub/fig-totalsales-output-1.png){#fig-totalsales}\n:::\n:::\n\n\nFrom the first sub plot, it is clear that there is a significant difference in the distributions (Metric A and Metric B values). But the second sub plot shows that both the distributions have same pattern and the values ranges between 0 and 1. In short the visualization is more appealing and self explanatory in this case.\n\n:::{.callout-note}\nThe `min-max` scaling method will confine the feature values (attributes) into the range $[0,1]$. So in effect all the features are scaled proportionally to the data spectrum.\n:::\n\nSimilarly, we can use the `standard scaling` (transformation to normal distribution) using the transformation $\\dfrac{x-\\bar{x}}{\\sigma}$. Scaling table is given as a practice task to the reader. The python code for this operation is shown in [Fig @fig-minmax].\n\n::: {#cell-fig-minmax .cell execution_count=5}\n``` {.python .cell-code}\n# Standard scaling from scratch\ndef standard_scaling(data):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    scaled_data = (data - mean) / std\n    return scaled_data\n\n# Apply standard scaling\nscaled_data_scratch = standard_scaling(data)\n\nprint(\"Standard Scaled Data (from scratch):\\n\", scaled_data_scratch)\n\n# Visualization\nplt.figure(figsize=(6, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(data, cmap='viridis')\nplt.title('Original Data')\nplt.colorbar()\n\nplt.subplot(1, 2, 2)\nplt.imshow(scaled_data_scratch, cmap='viridis')\nplt.title('Scaled Data')\nplt.colorbar()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStandard Scaled Data (from scratch):\n [[-1.41421356 -1.41421356]\n [-0.70710678 -0.70710678]\n [ 0.          0.        ]\n [ 0.70710678  0.70710678]\n [ 1.41421356  1.41421356]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Min-max scaling using basic python](module_2_files/figure-epub/fig-minmax-output-2.png){#fig-minmax}\n:::\n:::\n\n\nTo understand the effect of standard scaling, let us consider [Fig @fig-comp1]. This plot create the frequency distribution of the data as a histogram along with the density function. From the first sub-plot, it is clear that the distribution has multiple modes (peaks). When we apply the standard scaling, the distribution become un-modal(only one peek). This is demonstrated in the second sub-plot.\n\n::: {#cell-fig-comp1 .cell execution_count=6}\n``` {.python .cell-code}\n# Standard scaling from scratch\nimport seaborn as sns\n# Create plots\nplt.figure(figsize=(6, 5))\n\n# Plot for original data\nplt.subplot(1, 2, 1)\nsns.histplot(data, kde=True, bins=10, palette=\"viridis\")\nplt.title('Original Data Distribution')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\n# Plot for standard scaled data\nplt.subplot(1, 2, 2)\nsns.histplot(scaled_data_scratch, kde=True, bins=10, palette=\"viridis\")\nplt.title('Standard Scaled Data Distribution')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Impact of standard scaling on the distribution](module_2_files/figure-epub/fig-comp1-output-1.png){#fig-comp1}\n:::\n:::\n\n\nA scatter plot showing the compare the impact of scaling on the given distribution is shown in [Fig @fig-scatter].\n\n::: {#cell-fig-scatter .cell execution_count=7}\n``` {.python .cell-code}\n# Plot original and scaled data\nplt.figure(figsize=(6, 5))\n\n# Original Data\nplt.subplot(1, 3, 1)\nplt.scatter(data[:, 0], data[:, 1], color='blue')\nplt.title('Original Data')\nplt.xlabel('Metric A')\nplt.ylabel('Metric B')\n\n# Standard Scaled Data\nplt.subplot(1, 3, 2)\nplt.scatter(scaled_data_scratch[:, 0], scaled_data_scratch[:, 1], color='green')\nplt.title('Standard Scaled Data')\nplt.xlabel('Metric A (Standard Scaled)')\nplt.ylabel('Metric B (Standard Scaled)')\n\n# Min-Max Scaled Data\nplt.subplot(1, 3, 3)\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], color='red')\nplt.title('Min-Max Scaled Data')\nplt.xlabel('Metric A (Min-Max Scaled)')\nplt.ylabel('Metric B (Min-Max Scaled)')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Comparison of impact of scaling on the distribution](module_2_files/figure-epub/fig-scatter-output-1.png){#fig-scatter}\n:::\n:::\n\n\nFrom the [Fig @fig-scatter], it is clear that the scaling does not affect the pattern of the data, instead it just scale the distribution proportionally!\n\nWe can use the `scikit-learn` library for do the same thing in a very simple handy approach. The `python` code for this job is shown below.\n\n::: {#df2e52de .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Min-max scaling using sklearn\nscaler = MinMaxScaler()\nmin_max_scaled_data_sklearn = scaler.fit_transform(data)\n\nprint(\"Min-Max Scaled Data (using sklearn):\\n\", min_max_scaled_data_sklearn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMin-Max Scaled Data (using sklearn):\n [[0.   0.  ]\n [0.25 0.25]\n [0.5  0.5 ]\n [0.75 0.75]\n [1.   1.  ]]\n```\n:::\n:::\n\n\n::: {#c1242918 .cell execution_count=9}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler\n\n# Standard scaling using sklearn\nscaler = StandardScaler()\nscaled_data_sklearn = scaler.fit_transform(data)\n\nprint(\"Standard Scaled Data (using sklearn):\\n\", scaled_data_sklearn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStandard Scaled Data (using sklearn):\n [[-1.41421356 -1.41421356]\n [-0.70710678 -0.70710678]\n [ 0.          0.        ]\n [ 0.70710678  0.70710678]\n [ 1.41421356  1.41421356]]\n```\n:::\n:::\n\n\nA scatter plot showing the impact on scaling is shown in [Fig @fig-comp2]. This plot compare the m`min-max` and `standard-scaling`.\n\n::: {#cell-fig-comp2 .cell execution_count=10}\n``` {.python .cell-code}\n# Plot original and scaled data\nplt.figure(figsize=(6, 5))\n\n# Original Data\nplt.subplot(1, 3, 1)\nplt.scatter(data[:, 0], data[:, 1], color='blue')\nplt.title('Original Data')\nplt.xlabel('Metric A')\nplt.ylabel('Metric B')\n\n# Standard Scaled Data\nplt.subplot(1, 3, 2)\nplt.scatter(scaled_data_sklearn[:, 0], scaled_data_sklearn[:, 1], color='green')\nplt.title('Standard Scaled Data')\nplt.xlabel('Metric A (Standard Scaled)')\nplt.ylabel('Metric B (Standard Scaled)')\n\n# Min-Max Scaled Data\nplt.subplot(1, 3, 3)\nplt.scatter(min_max_scaled_data_sklearn[:, 0], min_max_scaled_data_sklearn[:, 1], color='red')\nplt.title('Min-Max Scaled Data')\nplt.xlabel('Metric A (Min-Max Scaled)')\nplt.ylabel('Metric B (Min-Max Scaled)')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Camparison of Min-max and standard  scalings with original data](module_2_files/figure-epub/fig-comp2-output-1.png){#fig-comp2}\n:::\n:::\n\n\n### More on Matrix Product and its Applications\n\nIn the first module of our course, we introduced matrix products as scalar projections, focusing on how matrices interact through basic operations. In this section, we will expand on this by exploring different types of matrix products that have practical importance in various fields. One such product is the *Hadamard product*, which is particularly useful in applications ranging from image processing to neural networks and statistical analysis. We will cover the definition, properties, and examples of the Hadamard product, and then delve into practical applications with simulated data.\n\n#### Hadamard Product\n\nThe Hadamard product (or element-wise product) of two matrices is a binary operation that combines two matrices of the same dimensions to produce another matrix of the same dimensions, where each element is the product of corresponding elements in the original matrices.\n\n:::{.callout-important}\n### Definition (Hadamard Product):\nFor two matrices $A$ and $B$ of the same dimension $m \\times n$, the Hadamard product $A \\circ B$ is defined as:\n\n$$(A \\circ B)_{ij} = A_{ij} \\cdot B_{ij}$$\n\nwhere $\\cdot$ denotes element-wise multiplication.\n:::\n\n::: {.callout-note}\n### Properties of Hadamard Product\n\n1.  **Commutativity**: \n  $$A \\circ B = B \\circ A$$\n  \n2.  **Associativity**: \n  $$(A \\circ B) \\circ C = A \\circ (B \\circ C)$$\n  \n3.  **Distributivity**: \n  $$A \\circ (B + C) = (A \\circ B) + (A \\circ C)$$\n:::\n\nSome simple examples to demonstrate the Hadamard product is given below.\n\nExample 1: Basic Hadamard Product\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}1 & 2 \\\\3 & 4\\end{pmatrix}, \\quad B = \\begin{pmatrix}5 & 6 \\\\7 & 8\\end{pmatrix}$$\n\nThe Hadamard product $A \\circ B$ is:\n\n$$A \\circ B = \\begin{pmatrix}1 \\cdot 5 & 2 \\cdot 6 \\\\3 \\cdot 7 & 4 \\cdot 8\\end{pmatrix} = \\begin{pmatrix}5 & 12 \\\\21 & 32\\end{pmatrix}$$\n\nExample 2: Hadamard Product with Larger Matrices\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}1 & 2 & 3 \\\\4 & 5 & 6 \\\\7 & 8 & 9\\end{pmatrix}, \\quad B = \\begin{pmatrix}9 & 8 & 7 \\\\6 & 5 & 4 \\\\3 & 2 & 1\\end{pmatrix}$$\n\nThe Hadamard product $A \\circ B$ is:\n\n$$A \\circ B = \\begin{pmatrix}1 \\cdot 9 & 2 \\cdot 8 & 3 \\cdot 7 \\\\4 \\cdot 6 & 5 \\cdot 5 & 6 \\cdot 4 \\\\7 \\cdot 3 & 8 \\cdot  & 9 \\cdot 1\\end{pmatrix} = \\begin{pmatrix}9 & 16 & 21 \\\\24 & 25 & 24 \\\\21 & 16 & 9\\end{pmatrix}$$\n\nIn the following code chunks the computational process of Hadamard product is implemented in `Python`. Here both the from the scratch and use of external module versions are included.\n\n**1. Compute Hadamard Product from Scratch (without Libraries)**\n\nHere’s how you can compute the Hadamard product manually:\n\n::: {#77219af4 .cell execution_count=11}\n``` {.python .cell-code}\n# Define matrices A and B\nA = [[1, 2, 3], [4, 5, 6]]\nB = [[7, 8, 9], [10, 11, 12]]\n\n# Function to compute Hadamard product\ndef hadamard_product(A, B):\n    # Get the number of rows and columns\n    num_rows = len(A)\n    num_cols = len(A[0])\n    \n    # Initialize the result matrix\n    result = [[0]*num_cols for _ in range(num_rows)]\n    \n    # Compute the Hadamard product\n    for i in range(num_rows):\n        for j in range(num_cols):\n            result[i][j] = A[i][j] * B[i][j]\n    \n    return result\n\n# Compute Hadamard product\nhadamard_product_result = hadamard_product(A, B)\n\n# Display result\nprint(\"Hadamard Product (From Scratch):\")\nfor row in hadamard_product_result:\n    print(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHadamard Product (From Scratch):\n[7, 16, 27]\n[40, 55, 72]\n```\n:::\n:::\n\n\n**2. Compute Hadamard Product Using `SymPy`**\n\nHere’s how to compute the Hadamard product using `SymPy`:\n\n::: {#0d42725e .cell execution_count=12}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define matrices A and B\nA = sp.Matrix([[1, 2, 3], [4, 5, 6]])\nB = sp.Matrix([[7, 8, 9], [10, 11, 12]])\n\n# Compute Hadamard product using SymPy\nHadamard_product_sympy = A.multiply_elementwise(B)\n\n# Display result\nprint(\"Hadamard Product (Using SymPy):\")\nprint(Hadamard_product_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHadamard Product (Using SymPy):\nMatrix([[7, 16, 27], [40, 55, 72]])\n```\n:::\n:::\n\n\n**Practical Applications**\n\n*Application 1: Image Masking*\n\nThe Hadamard product can be used for image masking. Here’s how you can apply a mask to an image and visualize it as shown in [Fig @fig-imgmask].\n\n::: {#cell-fig-imgmask .cell execution_count=13}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Simulated large image (2D array) using NumPy\nimage = np.random.rand(100, 100)\n\n# Simulated mask (binary matrix) using NumPy\nmask = np.random.randint(0, 2, size=(100, 100))\n\n# Compute Hadamard product\nmasked_image = image * mask\n\n# Plot original image and masked image\nfig, ax = plt.subplots(1, 2, figsize=(12, 5))\nax[0].imshow(image, cmap='gray')\nax[0].set_title('Original Image')\nax[1].imshow(masked_image, cmap='gray')\nax[1].set_title('Masked Image')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Demonstration of Masking in DIP using Hadamard Product](module_2_files/figure-epub/fig-imgmask-output-1.png){#fig-imgmask}\n:::\n:::\n\n\nApplication 2: Element-wise Scaling in Neural Networks\n\nThe Hadamard product can be used for dropout^[A regularization techniques in Deep learning. This approach deactivate some selected neurons to control model over-fitting] in neural networks. A simple simulated example is given below.\n\n::: {#5a90e463 .cell execution_count=14}\n``` {.python .cell-code}\n# Simulated large activations (2D array) using NumPy\nactivations = np.random.rand(100, 100)\n\n# Simulated dropout mask (binary matrix) using NumPy\ndropout_mask = np.random.randint(0, 2, size=(100, 100))\n\n# Apply dropout\ndropped_activations = activations * dropout_mask\n\n# Display results\nprint(\"Original Activations:\")\nprint(activations)\nprint(\"\\nDropout Mask:\")\nprint(dropout_mask)\nprint(\"\\nDropped Activations:\")\nprint(dropped_activations)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal Activations:\n[[0.62450076 0.7616576  0.91084243 ... 0.30396248 0.0719319  0.97222825]\n [0.38799401 0.06245675 0.86618135 ... 0.78801208 0.15113718 0.03151201]\n [0.10961695 0.5499815  0.76492446 ... 0.17648393 0.96664536 0.54151766]\n ...\n [0.83205661 0.40157596 0.79158817 ... 0.00759129 0.33017839 0.58892933]\n [0.55739554 0.38369706 0.97263713 ... 0.25615199 0.27080714 0.02733912]\n [0.75203942 0.0800006  0.29575769 ... 0.86160237 0.81958083 0.04750033]]\n\nDropout Mask:\n[[0 1 0 ... 0 1 0]\n [0 0 1 ... 1 0 0]\n [0 1 1 ... 1 0 0]\n ...\n [0 1 0 ... 0 1 0]\n [1 1 1 ... 1 1 1]\n [1 1 1 ... 0 1 0]]\n\nDropped Activations:\n[[0.         0.7616576  0.         ... 0.         0.0719319  0.        ]\n [0.         0.         0.86618135 ... 0.78801208 0.         0.        ]\n [0.         0.5499815  0.76492446 ... 0.17648393 0.         0.        ]\n ...\n [0.         0.40157596 0.         ... 0.         0.33017839 0.        ]\n [0.55739554 0.38369706 0.97263713 ... 0.25615199 0.27080714 0.02733912]\n [0.75203942 0.0800006  0.29575769 ... 0.         0.81958083 0.        ]]\n```\n:::\n:::\n\n\nApplication 3: Statistical Data Analysis\n\nIn statistics, the Hadamard product can be applied to scale covariance matrices. Here’s how we can compute the covariance matrix using matrix operations and apply scaling. Following `Python` code demonstrate this.\n\n::: {#5a98aba2 .cell execution_count=15}\n``` {.python .cell-code}\nimport sympy as sp\nimport numpy as np\n\n# Simulated large dataset (2D array) using NumPy\ndata = np.random.rand(100, 10)\n\n# Compute the mean of each column\nmean = np.mean(data, axis=0)\n\n# Center the data\ncentered_data = data - mean\n\n# Compute the covariance matrix using matrix product operation\ncov_matrix = (centered_data.T @ centered_data) / (centered_data.shape[0] - 1)\ncov_matrix_sympy = sp.Matrix(cov_matrix)\n\n# Simulated scaling factors (2D array) using SymPy Matrix\nscaling_factors = sp.Matrix(np.random.rand(10, 10))\n\n# Compute Hadamard product\nscaled_cov_matrix = cov_matrix_sympy.multiply(scaling_factors)\n\n# Display results\nprint(\"Covariance Matrix:\")\nprint(cov_matrix_sympy)\nprint(\"\\nScaling Factors:\")\nprint(scaling_factors)\nprint(\"\\nScaled Covariance Matrix:\")\nprint(scaled_cov_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCovariance Matrix:\nMatrix([[0.0837308024794668, -0.00421665786570744, 0.00588998454917015, 0.00264474126946287, 0.00867945600969734, 0.0106291092399838, -0.0221521749503562, 0.00613428682059140, 0.00222986347555673, 0.00412907669614149], [-0.00421665786570744, 0.0861847668069581, 0.00298810245301390, 0.00671270536048655, -0.00246302670694958, 0.00736089753324319, 0.00860058682456805, 0.00262546732048806, -0.00681644243998665, -0.0240454893868112], [0.00588998454917015, 0.00298810245301390, 0.0728844072301720, -0.00164984032872503, 0.00995518416208061, 0.00305754010299415, -0.00816704396979732, -0.00321879886935230, 0.00177792364033206, 9.94771283020742e-6], [0.00264474126946287, 0.00671270536048655, -0.00164984032872503, 0.0870247587879727, 0.00481984351858535, 0.00459621151419504, 0.00468231426408159, 0.0167501768374995, -0.00123219769570029, 0.00605419327653536], [0.00867945600969734, -0.00246302670694958, 0.00995518416208061, 0.00481984351858535, 0.0915640554399253, -0.00536671220758787, 0.00348907191677186, -0.0169622244988422, -0.00187281450792219, 0.00309508892124480], [0.0106291092399838, 0.00736089753324319, 0.00305754010299415, 0.00459621151419504, -0.00536671220758787, 0.0938627752404592, 3.93879667082210e-5, 0.00182295565444262, -0.00829849112570358, -0.00750540799473940], [-0.0221521749503562, 0.00860058682456805, -0.00816704396979732, 0.00468231426408159, 0.00348907191677186, 3.93879667082210e-5, 0.0964284530471328, 0.00180574355834792, -0.00813085277402281, -0.00657719103955585], [0.00613428682059140, 0.00262546732048806, -0.00321879886935230, 0.0167501768374995, -0.0169622244988422, 0.00182295565444262, 0.00180574355834792, 0.0931763562926469, -0.00152760587934449, -0.00246873042736175], [0.00222986347555673, -0.00681644243998665, 0.00177792364033206, -0.00123219769570029, -0.00187281450792219, -0.00829849112570358, -0.00813085277402281, -0.00152760587934449, 0.0736320387588618, 0.00525073593697525], [0.00412907669614149, -0.0240454893868112, 9.94771283020742e-6, 0.00605419327653536, 0.00309508892124480, -0.00750540799473940, -0.00657719103955585, -0.00246873042736175, 0.00525073593697525, 0.0891686912536864]])\n\nScaling Factors:\nMatrix([[0.534411612623789, 0.601163730493388, 0.924146850509148, 0.429198807222837, 0.173658013971194, 0.495858785073830, 0.827600137274861, 0.555421332648723, 0.361526209507804, 0.0659666853050868], [0.205212617820137, 0.300521092565584, 0.972392298710817, 0.679559638326760, 0.888296205294141, 0.582849815918479, 0.654022117697579, 0.633315673427975, 0.733719832397316, 0.536480297194670], [0.0355841504032128, 0.0712285416694586, 0.583890175623073, 0.633682628038478, 0.307224229281244, 0.955200872999160, 0.203928801194696, 0.657556525252316, 0.216325266212387, 0.690602840228298], [0.737803848330023, 0.831538596460287, 0.734436220828284, 0.0284733196702788, 0.906461155235548, 0.331852455237356, 0.401773315722233, 0.565945816241254, 0.976322614166303, 0.564914106378926], [2.62182729615645e-6, 0.509872494439875, 0.979427140674316, 0.938005456553180, 0.253027964459192, 0.553277478843959, 0.963365109633903, 0.0421281602390234, 0.0269645585905094, 0.106138713473971], [0.732719701575702, 0.350470750560079, 0.294792955283661, 0.602542547730251, 0.801731202023174, 0.617042311576262, 0.624549252115921, 0.255220692535359, 0.918895590690018, 0.301412478061524], [0.774291716628902, 0.351118681068247, 0.809197710260442, 0.224938939550611, 0.951147602574916, 0.796458568972899, 0.168850936882198, 0.829128306112575, 0.271456810906304, 0.823232452271410], [0.288485067216630, 0.0919232513477417, 0.450502758992944, 0.668552115285986, 0.445475709608967, 0.0766399604334124, 0.421458612785575, 0.163599806384539, 0.800256568045284, 0.990365495185235], [0.298684145878941, 0.547455348191677, 0.132540412698182, 0.0688407463843772, 0.438264081966355, 0.891676840103729, 0.962350838136311, 0.226335923100052, 0.477037892550534, 0.969399236394383], [0.848981550873712, 0.689671551355646, 0.118801664886814, 0.644679354671902, 0.539930258761177, 0.674861780154838, 0.912292497909698, 0.262794052743524, 0.0259250751758229, 0.353777924866168]])\n\nScaled Covariance Matrix:\nMatrix([[0.0426194120503298, 0.0566923727332656, 0.0759192030712810, 0.0533588828216939, 0.0105889886863494, 0.0445272312771032, 0.0885592165905715, 0.0365099623963713, 0.0411008071848159, 0.00440915462487438], [0.0108518588973999, 0.0134300803536415, 0.0907232127484996, 0.0486864565621900, 0.0814861358620956, 0.0411488036296552, 0.0324702464553022, 0.0594776047940037, 0.0761693431674608, 0.0483370452307602], [0.000664722731085021, 0.0122225402759233, 0.0525233216537940, 0.0580172751922321, 0.0211263781838961, 0.0759692180991336, 0.0315137245520073, 0.0464623735965157, 0.0176113036535646, 0.0451878467236619], [0.0835366669407800, 0.0866071158477300, 0.0898887891551770, 0.0304894535287576, 0.104348508103486, 0.0460301597845522, 0.0609081595502228, 0.0631974219000676, 0.109086765186057, 0.0750855345616639], [0.00398775248932389, 0.0547748474966341, 0.0983782158575365, 0.0824621250646870, 0.0222251486824330, 0.0632234575057335, 0.0888582977844787, 0.0155298347847503, -0.00771266677055020, 0.00230294726120843], [0.0711716741720446, 0.0332635518113796, 0.0434167898553773, 0.0589726045573149, 0.0805451310590136, 0.0566610836113406, 0.0554745842292427, 0.0353870203450541, 0.0978139771516323, 0.0282179691594317], [0.0602916628761386, 0.0194085988349207, 0.0669745171981909, 0.0126892675705022, 0.0918500211095556, 0.0549867706752540, -0.00588855991585798, 0.0672580082987383, 0.0248087947795386, 0.0715023295837778], [0.0431224723362916, 0.0168263829285492, 0.0455102593671572, 0.0490447066990319, 0.0559844507072658, 0.00434705453404530, 0.0335175112431158, 0.0279299895461660, 0.0952815034227736, 0.0992127351268611], [0.0125806748958339, 0.0354669920785448, -0.00559965651384283, -0.00373677804320908, 0.0133256185221028, 0.0548719369525042, 0.0639011527552227, 0.00625043861272464, 0.0191421822087782, 0.0593518825843526], [0.0677060265641628, 0.0610740978143017, -0.00943976969647351, 0.0387081576252717, 0.0227047463471343, 0.0465632573318208, 0.0726695338492046, 0.00747694632427491, -0.0159946498679274, 0.0176421758694615]])\n```\n:::\n:::\n\n\n#### Practice Problems\n\n**Problem 1: Basic Hadamard Product**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&2\\\\3&4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}5&6\\\\7&8\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ B$.\n\n**Solution:**\n\n$$C=\\begin{bmatrix}1\\cdot 5&2\\cdot 6\\\\3\\cdot7&4\\cdot 8 \\end{bmatrix}=\\begin{bmatrix}5&12\\\\21&32\\end{bmatrix}$$\n\n**Problem 2: Hadamard Product with Identity Matrix**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&2&3\\\\4&5&6\\end{bmatrix}$$\n$$I=\\begin{bmatrix}1&0&0\\\\0&1&0\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ I$.\n\n**Solution:**\n\n$$C=\\begin{bmatrix}1\\cdot1&2\\cdot 0&3\\cdot 0\\\\4\\cdot 0&5\\cdot 1&6\\cdot 0 \\end{bmatrix}= \\begin{bmatrix} 1&0&0\\\\0&5&0\\end{bmatrix}$$\n\n**Problem 3: Hadamard Product with Zero Matrix**\n\nGiven matrices:\n$$A=\\begin{bmatrix}3&4\\\\5&6\\end{bmatrix}$$\n$$Z=\\begin{bmatrix}0&0\\\\0&0\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ Z$.\n\n**Solution:**\n\n$$C=\\begin{bmatrix}3\\cdot 0&4\\cdot 0\\\\ 5\\cdot 0&6\\cdot 0 \\end{bmatrix}=\\begin{bmatrix}0&0\\\\0&0\\end{bmatrix}$$\n\n**Problem 4: Hadamard Product of Two Identity Matrices**\n\nGiven identity matrices:\n$$I_2=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}$$\n$$I_3=\\begin{bmatrix}1&0&0\\\\0&1&0\\\\0&0&1\\end{bmatrix}$$\n\nFind the Hadamard product $C=I_2\\circ I_3$ (extend $I_2$ to match dimensions of $I_3$).\n\n**Solution:**\n\nExtend $I_2$ to $I_3$:\n$$I_2=\\begin{bmatrix}1&0&0\\\\0&1&0\\\\0&0&0\\end{bmatrix}$$\n\n$$C=\\begin{bmatrix}1\\cdot 1&0\\cdot 0&0\\cdot 0\\\\0\\cdot 0&1\\cdot 1&0\\cdot 0\\\\0\\cdot 0&0\\cdot 0&0\\cdot 1\\end{bmatrix}=\\begin{bmatrix}1&0&0\\\\0&1&0\\\\0&0&0\\end{bmatrix}$$\n\n**Problem 5: Hadamard Product with Random Matrices**\n\nGiven random matrices:\n$$A=\\begin{bmatrix}2&3\\\\1&4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}0&5\\\\6&2\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ B$.\n\n**Solution:**\n\n$$C=\\begin{bmatrix}2\\cdot 0&3\\cdot 5\\\\1\\cdot 6&4\\cdot 2\\end{bmatrix}=\\begin{bmatrix}0&15\\\\6&8\\end{bmatrix}$$\n\n**Problem 6: Hadamard Product of 3x3 Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&2&3\\\\4&5&6\\\\7&8&9\\end{bmatrix}$$\n$$B=\\begin{bmatrix}9&8&7\\\\6&5&4\\\\3&2&1\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ B$.\n\n**Solution:**\n\n$$C=\\begin{bmatrix}1\\cdot 9&2\\cdot 8&3\\cdot 7\\\\4\\cdot 6&5\\cdot 5&6\\cdot 4\\\\7\\cdot 3&8\\cdot 2&9\\cdot 1\\end{bmatrix}=\\begin{bmatrix}9&16&21\\\\24&25&24\\\\21&16&9\\end{bmatrix}$$\n\n**Problem 7: Hadamard Product of Column Vectors**\n\nGiven column vectors:\n$$u=\\begin{bmatrix}2\\\\3\\end{bmatrix}$$\n$$v=\\begin{bmatrix}5\\\\6\\end{bmatrix}$$\n\nFind the Hadamard product $w=u\\circ v$.\n\n**Solution:**\n\n$$w=\\begin{bmatrix}2\\cdot 5\\\\3\\cdot 6\\end{bmatrix}=\\begin{bmatrix}10\\\\18\\end{bmatrix}$$\n\n**Problem 8: Hadamard Product with Non-Square Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&2\\\\3&4\\\\5&6\\end{bmatrix}$$\n$$B=\\begin{bmatrix}7&8\\\\9&10\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ B$ (extend $B$ to match dimensions of $A$).\n\n**Solution:**\n\nExtend $B$ to match dimensions of $A$:\n$$B=\\begin{bmatrix}7&8\\\\9&10\\\\7&8\\end{bmatrix}$$\n\n$$C=\\begin{bmatrix}1\\cdot 7&2\\cdot 8\\\\3\\cdot 9&4\\cdot 10\\\\5\\cdot 7&6\\cdot 8\\end{bmatrix}=\\begin{bmatrix}7&16\\\\27&40\\\\35&48\\end{bmatrix}$$\n\n**Problem 9: Hadamard Product in Image Processing**\n\nGiven matrices representing image pixel values:\n$$A=\\begin{bmatrix}10&20\\\\30&40\\end{bmatrix}$$\n$$B=\\begin{bmatrix}0.5&1.5\\\\2.0&0.5\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ B$.\n\n**Solution:**\n\n$$C=\\begin{bmatrix}10\\cdot 0.5&20\\cdot 1.5\\\\30\\cdot 2.0&40\\cdot 0.5\\end{bmatrix}=\\begin{bmatrix}5&30\\\\60&20\\end{bmatrix}$$\n\n**Problem 10: Hadamard Product in Statistical Data**\n\nGiven matrices representing two sets of statistical data:\n\n$$A=\\begin{bmatrix}5&6&7\\\\8&9&10\\end{bmatrix}$$\n$$B=\\begin{bmatrix}1&2&3\\\\4&5&6\\end{bmatrix}$$\n\nFind the Hadamard product $C=A\\circ B$.\n\n**Solution:**\n\n$$C=\\begin{bmatrix}5\\cdot 1&6\\cdot 2&7\\cdot 3\\\\8\\cdot 4&9\\cdot 5&10\\cdot 6\\end{bmatrix}=\\begin{bmatrix}5&12&21\\\\32&45&60\\end{bmatrix}$$\n\n#### Inner Product of Matrices\n\nThe inner product of two matrices is a generalized extension of the dot product, where each matrix is treated as a vector in a high-dimensional space. For two matrices $A$ and $B$ of the same dimension $m \\times n$, the inner product is defined as the sum of the element-wise products of the matrices.\n\n::: {.callout-important}\n### Definition (Inner product)\n\nFor two matrices $A$ and $B$ of dimension $m \\times n$, the inner product $\\langle A, B \\rangle$ is given by:\n\n$$\\langle A, B \\rangle = \\sum_{i=1}^{m} \\sum_{j=1}^{n} A_{ij} \\cdot B_{ij}$$\n\nwhere $\\cdot$ denotes element-wise multiplication.\n:::\n\n\n::: {.callout-important}\n### Properties\n\n1.  **Commutativity**: \n  $$\\langle A, B \\rangle = \\langle B, A \\rangle$$\n  \n2.  **Linearity**: \n  $$\\langle A + C, B \\rangle = \\langle A, B \\rangle + \\langle C, B \\rangle$$\n  \n3.  **Positive Definiteness**: \n  $$\\langle A, A \\rangle \\geq 0$$\n  with equality if and only if $A$ is a zero matrix.\n:::\n\n\nSome simple examples showing the mathematical process of calculating the inner product is given bellow.\n\n**Example 1: Basic Inner Product**\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}1 & 2 \\\\3 & 4\\end{pmatrix}, \\quad B = \\begin{pmatrix}5 & 6 \\\\7 & 8\\end{pmatrix}$$\n\nThe inner product $\\langle A, B \\rangle$ is:\n\n$$\\langle A, B \\rangle = 1 \\cdot 5 + 2 \\cdot 6 + 3 \\cdot 7 + 4 \\cdot 8 = 5 + 12 + 21 + 32 = 70$$\n\n**Example 2: Inner Product with Larger Matrices**\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}1 & 2 & 3 \\\\4 & 5 & 6 \\\\7 & 8 & 9\\end{pmatrix}, \\quad B = \\begin{pmatrix}9 & 8 & 7 \\\\6 & 5 & 4 \\\\3 & 2 & 1\\end{pmatrix}$$\n\nThe inner product $\\langle A, B \\rangle$ is calculated as:\n\\begin{align*}\n\\langle A, B \\rangle &= 1 \\cdot 9 + 2 \\cdot 8 + 3 \\cdot 7 + 4 \\cdot 6 + 5 \\cdot 5 + 6 \\cdot 4 + 7 \\cdot 3 + 8 \\cdot 2 + 9 \\cdot 1\\\\\n&= 9 + 16 + 21 + 24 + 25 + 24 + 21 + 16 + 9\\\\\n&= 175\n\\end{align*}\n\n#### Practice Problems\n\n**Problem 1: Inner Product of 2x2 Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&2\\\\3&4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}5&6\\\\7&8\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 1\\cdot5 + 2\\cdot6 + 3\\cdot7 + 4\\cdot8 \\\\\n&= 5 + 12 + 21 + 32 \\\\\n&= 70\n\\end{align*}\n\n---\n\n**Problem 2: Inner Product of 3x3 Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&0&2\\\\3&4&5\\\\6&7&8\\end{bmatrix}$$\n$$B=\\begin{bmatrix}8&7&6\\\\5&4&3\\\\2&1&0\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 1\\cdot8 + 0\\cdot7 + 2\\cdot6 + \\\\\n&\\quad 3\\cdot5 + 4\\cdot4 + 5\\cdot3 + \\\\\n&\\quad 6\\cdot2 + 7\\cdot1 + 8\\cdot0 \\\\\n&= 8 + 0 + 12 + 15 + 16 + 15 + 12 + 7 + 0 \\\\\n&= 85\n\\end{align*}\n\n---\n\n**Problem 3: Inner Product of Diagonal Matrices**\n\nGiven diagonal matrices:\n$$A=\\begin{bmatrix}2&0&0\\\\0&3&0\\\\0&0&4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}5&0&0\\\\0&6&0\\\\0&0&7\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 2\\cdot5 + 0\\cdot0 + 0\\cdot0 + \\\\\n&\\quad 0\\cdot0 + 3\\cdot6 + 0\\cdot0 + \\\\\n&\\quad 0\\cdot0 + 0\\cdot0 + 4\\cdot7 \\\\\n&= 10 + 0 + 0 + 0 + 18 + 0 + 0 + 0 + 28 \\\\\n&= 56\n\\end{align*}\n\n---\n\n**Problem 4: Inner Product of Column Vectors**\n\nGiven column vectors:\n$$u=\\begin{bmatrix}1\\\\2\\\\3\\end{bmatrix}$$\n$$v=\\begin{bmatrix}4\\\\5\\\\6\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle u,v \\rangle &= \\sum_{i} u_i v_i \\\\\n&= 1\\cdot4 + 2\\cdot5 + 3\\cdot6 \\\\\n&= 4 + 10 + 18 \\\\\n&= 32\n\\end{align*}\n\n---\n\n**Problem 5: Inner Product with Random Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}3&2\\\\1&4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}5&7\\\\8&6\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 3\\cdot5 + 2\\cdot7 + \\\\\n&\\quad 1\\cdot8 + 4\\cdot6 \\\\\n&= 15 + 14 + 8 + 24 \\\\\n&= 61\n\\end{align*}\n\n---\n\n**Problem 6: Inner Product of 2x3 and 3x2 Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&2&3\\\\4&5&6\\end{bmatrix}$$\n$$B=\\begin{bmatrix}7&8\\\\9&10\\\\11&12\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 1\\cdot7 + 2\\cdot8 + 3\\cdot11 + \\\\\n&\\quad 4\\cdot9 + 5\\cdot10 + 6\\cdot12 \\\\\n&= 7 + 16 + 33 + 36 + 50 + 72 \\\\\n&= 214\n\\end{align*}\n\n---\n\n**Problem 7: Inner Product with Transpose Operation**\n\nGiven matrices:\n$$A=\\begin{bmatrix}2&3\\\\4&5\\end{bmatrix}$$\n$$B=\\begin{bmatrix}6&7\\\\8&9\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 2\\cdot6 + 3\\cdot7 + \\\\\n&\\quad 4\\cdot8 + 5\\cdot9 \\\\\n&= 12 + 21 + 32 + 45 \\\\\n&= 110\n\\end{align*}\n\n---\n\n**Problem 8: Inner Product of Symmetric Matrices**\n\nGiven symmetric matrices:\n$$A=\\begin{bmatrix}1&2\\\\2&3\\end{bmatrix}$$\n$$B=\\begin{bmatrix}4&5\\\\5&6\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 1\\cdot4 + 2\\cdot5 + \\\\\n&\\quad 2\\cdot5 + 3\\cdot6 \\\\\n&= 4 + 10 + 10 + 18 \\\\\n&= 42\n\\end{align*}\n\n---\n\n**Problem 9: Inner Product with Complex Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1+i&2-i\\\\3+i&4-i\\end{bmatrix}$$\n$$B=\\begin{bmatrix}5-i&6+i\\\\7-i&8+i\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} \\text{Re}(A_{ij} \\overline{B_{ij}}) \\\\\n&= (1+i)\\cdot(5+i) + (2-i)\\cdot(6-i) + \\\\\n&\\quad (3+i)\\cdot(7+i) + (4-i)\\cdot(8+i) \\\\\n&= (5+i+5i-i^2) + (12-i-6i+i^2) + \\\\\n&\\quad (21+i+7i-i^2) + (32+i-8i-i^2) \\\\\n&= 5+5 + 12 - 6 + 21 + 32 - 2 \\\\\n&= 62\n\\end{align*}\n\n---\n\n**Problem 10: Inner Product of 4x4 Matrices**\n\nGiven matrices:\n$$A=\\begin{bmatrix}1&2&3&4\\\\5&6&7&8\\\\9&10&11&12\\\\13&14&15&16\\end{bmatrix}$$\n$$B=\\begin{bmatrix}16&15&14&13\\\\12&11&10&9\\\\8&7&6&5\\\\4&3&2&1\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\n\\langle A,B \\rangle &= \\sum_{i,j} A_{ij} B_{ij} \\\\\n&= 1\\cdot16 + 2\\cdot15 + 3\\cdot14 + 4\\cdot13 + \\\\\n&\\quad 5\\cdot12 + 6\\cdot11 + 7\\cdot10 + 8\\cdot9 + \\\\\n&\\quad 9\\cdot8 + 10\\cdot7 + 11\\cdot6 + 12\\cdot5 + \\\\\n&\\quad 13\\cdot4 + 14\\cdot3 + 15\\cdot2 + 16\\cdot1 \\\\\n&= 16 + 30 + 42 + 52 + 60 + 66 + 70 + 72 + \\\\\n&\\quad 72 + 70 + 66 + 60 + 52 + 42 + 30 + 16 \\\\\n&= 696\n\\end{align*}\n\n----\n\nNow let's look into the computational part of *inner product*.\n\n1. Compute Inner Product from Scratch (without Libraries)\n\nHere’s how you can compute the inner product from the scratch:\n\n::: {#fa773b39 .cell execution_count=16}\n``` {.python .cell-code}\n# Define matrices A and B\nA = [[1, 2, 3], [4, 5, 6]]\nB = [[7, 8, 9], [10, 11, 12]]\n\n# Function to compute inner product\ndef inner_product(A, B):\n    # Get the number of rows and columns\n    num_rows = len(A)\n    num_cols = len(A[0])\n    \n    # Initialize the result\n    result = 0\n    \n    # Compute the inner product\n    for i in range(num_rows):\n        for j in range(num_cols):\n            result += A[i][j] * B[i][j]\n    \n    return result\n\n# Compute inner product\ninner_product_result = inner_product(A, B)\n\n# Display result\nprint(\"Inner Product (From Scratch):\")\nprint(inner_product_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (From Scratch):\n217\n```\n:::\n:::\n\n\n2. Compute Inner Product Using `NumPy`\n\nHere’s how to compute the inner product using Numpy:\n\n::: {#a5948fa5 .cell execution_count=17}\n``` {.python .cell-code}\nimport numpy as np\n# Define matrices A and B\nA = np.array([[1, 2, 3], [4, 5, 6]])\nB = np.array([[7, 8, 9], [10, 11, 12]])\n# calculating innerproduct\ninner_product = (A*B).sum() # calculate element-wise product, then column sum\n\nprint(\"Inner Product (Using numpy):\")\nprint(inner_product)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (Using numpy):\n217\n```\n:::\n:::\n\n\nThe same operation can be done using `SymPy` functions as follows.\n\n::: {#f69ef5c0 .cell execution_count=18}\n``` {.python .cell-code}\nimport sympy as sp\nimport numpy as np  \n# Define matrices A and B\nA = sp.Matrix([[1, 2, 3], [4, 5, 6]])\nB = sp.Matrix([[7, 8, 9], [10, 11, 12]])\n\n# Compute element-wise product\nelementwise_product = A.multiply_elementwise(B)\n\n# Calculate sum of each column\ninner_product_sympy = np.sum(elementwise_product)\n\n# Display result\nprint(\"Inner Product (Using SymPy):\")\nprint(inner_product_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (Using SymPy):\n217\n```\n:::\n:::\n\n\nA vector dot product (in Physics) can be calculated using `SymPy` `.dot()` function as shown below. \n\nLet $A=\\begin{pmatrix}1&2&3\\end{pmatrix}$ and $B=\\begin{pmatrix}4&5&6\\end{pmatrix}$, then the dot product, $A\\cdot B$ is computed as:\n\n::: {#27ce362a .cell execution_count=19}\n``` {.python .cell-code}\nimport sympy as sp\nA=sp.Matrix([1,2,3])\nB=sp.Matrix([4,5,6])\ndisplay(A.dot(B)) # calculate fot product of A and B\n```\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n$\\displaystyle 32$\n:::\n:::\n\n\n:::{.callout-warning}\n## A word of caution\nIn `SymPy` , `sp.Matrix([1,2,3])` create a column vector. But `np.array([1,2,3])` creates a row vector. So be careful while applying matrix/ dot product operations on these objects.\n:::\n\nThe same dot product using `numpy` object can be done as follows:\n\n::: {#f3d088b2 .cell execution_count=20}\n``` {.python .cell-code}\nimport numpy as np\nA=np.array([1,2,3])\nB=np.array([4,5,6])\ndisplay(A.dot(B.T))# dot() stands for dot product B.T represents the transpose of B\n```\n\n::: {.cell-output .cell-output-display}\n```\nnp.int64(32)\n```\n:::\n:::\n\n\n**Practical Applications**\n\nApplication 1: Signal Processing\n\nIn signal processing, the inner product can be used to measure the similarity between two signals. Here the most popular measure of similarity is the `cosine` similarity. This measure is defined as:\n\n$$\\cos \\theta=\\dfrac{A\\cdot B}{||A|| ||B||}$$\n\nNow consider two digital signals are given. It's cosine similarity measure can be calculated with a simulated data as shown below.\n\n::: {#563f8a44 .cell execution_count=21}\n``` {.python .cell-code}\nimport numpy as np\n\n# Simulated large signals (1D array) using NumPy\nsignal1 = np.sin(np.random.rand(1000))\nsignal2 = np.cos(np.random.rand(1000))\n\n# Compute inner product\ninner_product_signal = np.dot(signal1, signal2)\n#cosine_sim=np.dot(signal1,signal2)/(np.linalg.norm(signal1)*np.linalg.norm(signal2))\n# Display result\ncosine_sim=inner_product_signal/(np.sqrt(np.dot(signal1,signal1))*np.sqrt(np.dot(signal2,signal2)))\nprint(\"Inner Product (Using numpy):\")\nprint(inner_product_signal)\nprint(\"Similarity of signals:\")\nprint(cosine_sim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (Using numpy):\n392.9212941620934\nSimilarity of signals:\n0.8688843612281103\n```\n:::\n:::\n\n\nApplication 2: Machine Learning - Feature Similarity\n\nIn machine learning, the inner product is used to calculate the similarity between feature vectors.\n\n::: {#0896b79e .cell execution_count=22}\n``` {.python .cell-code}\nimport numpy as np\n\n# Simulated feature vectors (2D array) using NumPy\nfeatures1 = np.random.rand(100, 10)\nfeatures2 = np.random.rand(100, 10)\n\n# Compute inner product for each feature vector\ninner_products = np.einsum('ij,ij->i', features1, features2) # use Einstien's sum\n\n# Display results\nprint(\"Inner Products of Feature Vectors:\")\ndisplay(inner_products)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Products of Feature Vectors:\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\narray([2.18286624, 3.45889706, 2.54653643, 2.82990448, 3.20792369,\n       2.43071769, 2.46747266, 2.12974915, 4.00310784, 2.14889946,\n       2.20799219, 3.32746364, 3.08004701, 1.40937481, 3.46559991,\n       2.18386866, 2.90800824, 2.04542989, 3.18697871, 2.70716513,\n       2.96906776, 3.4647005 , 2.49845555, 2.92772393, 2.38131941,\n       3.34061728, 2.52069744, 3.32069088, 1.10924084, 1.7496355 ,\n       1.66507973, 2.9704472 , 3.43601379, 1.91235297, 2.19897966,\n       2.88442253, 2.92955725, 1.46024745, 2.31773165, 3.38908977,\n       1.47670031, 3.66185315, 3.15482688, 3.23073775, 2.68935084,\n       1.56173009, 3.4987121 , 2.16188933, 3.39237348, 1.76170413,\n       2.6592145 , 3.15653308, 2.29790949, 1.99209193, 1.82967821,\n       2.06261842, 2.04897188, 1.87357828, 3.06496067, 1.50713597,\n       3.37923514, 2.64707168, 2.56377832, 1.92436811, 2.19014756,\n       1.33156866, 2.73290233, 3.00879116, 2.26404662, 3.06030709,\n       3.35674945, 1.62352264, 4.34317633, 1.40105671, 3.13226375,\n       2.7673187 , 2.93892529, 2.4571397 , 2.91994355, 3.36235576,\n       2.87700602, 1.18287263, 1.86512567, 1.52544612, 3.24393391,\n       3.54678538, 2.30385881, 1.50490504, 3.96962049, 3.3747918 ,\n       3.57320844, 2.68860604, 2.05709612, 3.38669411, 3.53992923,\n       3.4725902 , 3.32458667, 1.92947118, 2.11677311, 2.20359462])\n```\n:::\n:::\n\n\nApplication 3: Covariance Matrix in Statistics\n\nThe inner product can be used to compute covariance matrices for statistical data analysis. If $X$ is a given distribution and $x=X-\\bar{X}$. Then the covariance of $X$ can be calculated as $cov(X)=\\dfrac{1}{n-1}(x\\cdot x^T)$ ^[Remember that the covariance of $X$ is defined as $Cov(X)=\\dfrac{\\sum (X-\\bar{X})^2}{n-1}$]. The python code a simulated data is shown below.\n\n::: {#49d7a531 .cell execution_count=23}\n``` {.python .cell-code}\nimport sympy as sp\nimport numpy as np\n\n# Simulated large dataset (2D array) using NumPy\ndata = np.random.rand(100, 10)\n\n# Compute the mean of each column\nmean = np.mean(data, axis=0)\n\n# Center the data\ncentered_data = data - mean\n\n# Compute the covariance matrix using matrix product operation\ncov_matrix = (centered_data.T @ centered_data) / (centered_data.shape[0] - 1)\ncov_matrix_sympy = sp.Matrix(cov_matrix)\n\n# Display results\nprint(\"Covariance Matrix:\")\ndisplay(cov_matrix_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCovariance Matrix:\n```\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n$\\displaystyle \\left[\\begin{matrix}0.0851226527052011 & 0.00879303154404104 & -0.00435271299013824 & -0.00571988388200536 & 0.00326875274697421 & -0.00545010802388725 & -0.00101491362783822 & 0.0142602378170344 & 0.0029706137040887 & -0.00375858272943311\\\\0.00879303154404104 & 0.0656378616444778 & 0.00989343601323592 & -0.00532518678774003 & -0.00935161111707839 & -0.000253956155584847 & 0.00451028748317351 & 0.00759999485607828 & -0.00488091744906147 & 0.00647419226576938\\\\-0.00435271299013824 & 0.00989343601323592 & 0.0931815781120444 & -0.0190517725666686 & -0.00965956152602441 & -0.0018844854516408 & -0.00995658714838973 & -0.0117482419175767 & -0.00598375428546941 & -0.00038845558043563\\\\-0.00571988388200536 & -0.00532518678774003 & -0.0190517725666686 & 0.0753841203763102 & -0.0034652709677987 & -0.00264500277947987 & 0.0086500185524225 & 0.000522626810353048 & 0.00826059492126942 & -0.0119698338260028\\\\0.00326875274697421 & -0.00935161111707839 & -0.00965956152602441 & -0.0034652709677987 & 0.0858612428824572 & 0.0113764862739956 & -0.00109917873645039 & -2.53416976968688 \\cdot 10^{-5} & 0.00131722848465547 & -0.0048793210623191\\\\-0.00545010802388725 & -0.000253956155584847 & -0.0018844854516408 & -0.00264500277947987 & 0.0113764862739956 & 0.0805152208708198 & -0.00876782018631366 & 0.00192564387395137 & -0.00233260298544907 & -0.00555846516074533\\\\-0.00101491362783822 & 0.00451028748317351 & -0.00995658714838973 & 0.0086500185524225 & -0.00109917873645039 & -0.00876782018631366 & 0.0808058530173576 & 0.00579636592606542 & -0.00337806437995902 & 0.0149119473005049\\\\0.0142602378170344 & 0.00759999485607828 & -0.0117482419175767 & 0.000522626810353048 & -2.53416976968688 \\cdot 10^{-5} & 0.00192564387395137 & 0.00579636592606542 & 0.0806541499743598 & -0.0172628699659655 & -0.0033476952930479\\\\0.0029706137040887 & -0.00488091744906147 & -0.00598375428546941 & 0.00826059492126942 & 0.00131722848465547 & -0.00233260298544907 & -0.00337806437995902 & -0.0172628699659655 & 0.076316403577555 & -0.0099603886776855\\\\-0.00375858272943311 & 0.00647419226576938 & -0.00038845558043563 & -0.0119698338260028 & -0.0048793210623191 & -0.00555846516074533 & 0.0149119473005049 & -0.0033476952930479 & -0.0099603886776855 & 0.0986511787735635\\end{matrix}\\right]$\n:::\n:::\n\n\nThese examples demonstrate the use of inner product and dot product in various applications.\n\n#### Outer Product\n\nThe outer product of two vectors results in a matrix, and it is a way to combine these vectors into a higher-dimensional representation.\n\n:::{.callout-note}\n\n### Definition (Outer Product)\n\nFor two vectors $\\mathbf{u}$ and $\\mathbf{v}$ of dimensions $m$ and $n$ respectively, the outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is an $m \\times n$ matrix defined as:\n\n$$(\\mathbf{u} \\otimes \\mathbf{v})_{ij} = u_i \\cdot v_j$$\n\nwhere $\\cdot$ denotes the outer product operation. In matrix notation, for two column vectors $u,v$, \n$$u\\otimes v=uv^T$$\n:::\n\n\n:::{.callout-note}\n### Properties\n\n1.  **Linearity**:\n  $$(\\mathbf{u} + \\mathbf{w}) \\otimes \\mathbf{v} = (\\mathbf{u} \\otimes \\mathbf{v}) + (\\mathbf{w} \\otimes \\mathbf{v})$$\n  \n2.  **Distributivity**:\n  $$\\mathbf{u} \\otimes (\\mathbf{v} + \\mathbf{w}) = (\\mathbf{u} \\otimes \\mathbf{v}) + (\\mathbf{u} \\otimes \\mathbf{w})$$\n  \n3.  **Associativity**:\n  $$(\\mathbf{u} \\otimes \\mathbf{v}) \\otimes \\mathbf{w} = \\mathbf{u} \\otimes (\\mathbf{v} \\otimes \\mathbf{w})$$\n\n:::\n\nSome simple examples of outer product is given below.\n\n**Example 1: Basic Outer Product**\n\nGiven vectors:\n\n$$\\mathbf{u} = \\begin{pmatrix}1 \\\\2\\end{pmatrix}, \\quad\\mathbf{v} = \\begin{pmatrix}3 \\\\4 \\\\5\\end{pmatrix}$$\n\nThe outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{pmatrix}1 \\cdot 3 & 1 \\cdot 4 & 1 \\cdot 5 \\\\2 \\cdot 3 & 2 \\cdot 4 & 2 \\cdot 5\\end{pmatrix} = \\begin{pmatrix}3 & 4 & 5 \\\\6 & 8 & 10\\end{pmatrix}$$\n\n**Example 2: Outer Product with Larger Vectors**\n\nGiven vectors:\n$$\\mathbf{u} = \\begin{pmatrix}1 \\\\2 \\\\3\\end{pmatrix}, \\quad\\mathbf{v} = \\begin{pmatrix}4 \\\\5\\end{pmatrix}$$\n\nThe outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{pmatrix}1 \\cdot 4 & 1 \\cdot 5 \\\\2 \\cdot 4 & 2 \\cdot 5 \\\\3 \\cdot 4 & 3 \\cdot 5\\end{pmatrix} = \\begin{pmatrix}4 & 5 \\\\8 & 10 \\\\12 & 15\\end{pmatrix}$$\n\n\n#### Practice Problems\n\n**Find the outer product of A and B where A and B are given as follows:**\n\n**Problem 1:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}1\\\\2\\end{bmatrix}$$\n$$B=\\begin{bmatrix}3&4\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1\\\\2\\end{bmatrix} \\otimes \\begin{bmatrix}3&4\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot 3 & 1 \\cdot 4 \\\\\n2 \\cdot 3 & 2 \\cdot 4\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n3 & 4 \\\\\n6 & 8\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 2:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}1\\\\2\\\\3\\end{bmatrix}$$\n$$B=\\begin{bmatrix}4&5&6\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1\\\\2\\\\3\\end{bmatrix} \\otimes \\begin{bmatrix}4&5&6\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot 4 & 1 \\cdot 5 & 1 \\cdot 6 \\\\\n2 \\cdot 4 & 2 \\cdot 5 & 2 \\cdot 6 \\\\\n3 \\cdot 4 & 3 \\cdot 5 & 3 \\cdot 6\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n4 & 5 & 6 \\\\\n8 & 10 & 12 \\\\\n12 & 15 & 18\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 3:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}1&2\\end{bmatrix}$$\n$$B=\\begin{bmatrix}3\\\\4\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1&2\\end{bmatrix} \\otimes \\begin{bmatrix}3\\\\4\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot 3 & 1 \\cdot 4 \\\\\n2 \\cdot 3 & 2 \\cdot 4\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n3 & 4 \\\\\n6 & 8\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 4:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}0\\\\1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}1&-1\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}0\\\\1\\end{bmatrix} \\otimes \\begin{bmatrix}1&-1\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 \\cdot 1 & 0 \\cdot -1 \\\\\n1 \\cdot 1 & 1 \\cdot -1\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 & 0 \\\\\n1 & -1\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 5:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}2\\\\3\\end{bmatrix}$$\n$$B=\\begin{bmatrix}5&-2\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}2\\\\3\\end{bmatrix} \\otimes \\begin{bmatrix}5&-2\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n2 \\cdot 5 & 2 \\cdot -2 \\\\\n3 \\cdot 5 & 3 \\cdot -2\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n10 & -4 \\\\\n15 & -6\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 6:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}1\\\\0\\\\1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}2&-1&0\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1\\\\0\\\\1\\end{bmatrix} \\otimes \\begin{bmatrix}2&-1&0\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot 2 & 1 \\cdot -1 & 1 \\cdot 0 \\\\\n0 \\cdot 2 & 0 \\cdot -1 & 0 \\cdot 0 \\\\\n1 \\cdot 2 & 1 \\cdot -1 & 1 \\cdot 0\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n2 & -1 & 0 \\\\\n0 & 0 & 0 \\\\\n2 & -1 & 0\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 7:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}1\\\\-1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}2&0\\\\3&-1\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &=\\begin{bmatrix}1\\\\-1\\end{bmatrix}\\otimes \\begin{bmatrix}2&0\\\\3&-1\\end{bmatrix}\\\\\n&= \\begin{bmatrix}\n2 & 3&0&-1 \\\\\n-2&-3&0&1\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 8:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}3\\\\4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}1&-2&3\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}3\\\\4\\end{bmatrix} \\otimes \\begin{bmatrix}1&-2&3\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n3 \\cdot 1 & 3 \\cdot -2 & 3 \\cdot 3 \\\\\n4 \\cdot 1 & 4 \\cdot -2 & 4 \\cdot 3\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n3 & -6 & 9 \\\\\n4 & -8 & 12\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n\n**Problem 9:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}2\\\\3\\\\-1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}4&-2\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}2\\\\3\\\\-1\\end{bmatrix} \\otimes \\begin{bmatrix}4&-2\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n2 \\cdot 4 & 2 \\cdot -2 \\\\\n3 \\cdot 4 & 3 \\cdot -2 \\\\\n-1 \\cdot 4 & -1 \\cdot -2\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n8 & -4 \\\\\n12 & -6 \\\\\n-4 & 2\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 10:**\n\nFind the outer product of:\n$$A=\\begin{bmatrix}0\\\\5\\end{bmatrix}$$\n$$B=\\begin{bmatrix}3&1\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}0\\\\5\\end{bmatrix} \\otimes \\begin{bmatrix}3&1\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 \\cdot 3 & 0 \\cdot 1 \\\\\n5 \\cdot 3 & 5 \\cdot 1\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 & 0 \\\\\n15 & 5\n\\end{bmatrix}\n\\end{align*}\n\n----\n\n**1. Compute Outer Product of Vectors from Scratch (without Libraries)**\n\nHere’s how you can compute the outer product manually:\n\n::: {#cbb5fe7a .cell execution_count=24}\n``` {.python .cell-code}\n# Define vectors u and v\nu = [1, 2]\nv = [3, 4, 5]\n\n# Function to compute outer product\ndef outer_product(u, v):\n    # Initialize the result\n    result = [[a * b for b in v] for a in u]\n    return result\n\n# Compute outer product\nouter_product_result = outer_product(u, v)\n\n# Display result\nprint(\"Outer Product of Vectors (From Scratch):\")\nfor row in outer_product_result:\n    print(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of Vectors (From Scratch):\n[3, 4, 5]\n[6, 8, 10]\n```\n:::\n:::\n\n\n**2. Compute Outer Product of Vectors Using SymPy**\n\nHere’s how to compute the outer product using `SymPy`:\n\n::: {#e28f342b .cell execution_count=25}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define vectors u and v\nu = sp.Matrix([1, 2])\nv = sp.Matrix([3, 4, 5])\n\n# Compute outer product using SymPy\nouter_product_sympy = u * v.T\n\n# Display result\nprint(\"Outer Product of Vectors (Using SymPy):\")\ndisplay(outer_product_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of Vectors (Using SymPy):\n```\n:::\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n$\\displaystyle \\left[\\begin{matrix}3 & 4 & 5\\\\6 & 8 & 10\\end{matrix}\\right]$\n:::\n:::\n\n\n**Outer Product of Matrices**\n \nThe outer product of two matrices extends the concept from vectors to higher-dimensional tensors. For two matrices $A$ and $B$, the outer product results in a higher-dimensional tensor and is generally expressed as block matrices.\n\n:::{.callout-note}\n### Definition (Outer Product of Matrices)\n\nFor two matrices $A$ of dimension $m \\times p$ and $B$ of dimension $q \\times n$, the outer product $A \\otimes B$ results in a tensor of dimension $m \\times q \\times p \\times n$. The entries of the tensor are given by:\n\n$$(A \\otimes B)_{ijkl} = A_{ij} \\cdot B_{kl}$$\n\nwhere $\\cdot$ denotes the outer product operation.\n:::\n\n:::{.callout-note}\n\n### Properties\n\n1.  **Linearity**:\n  $$(A + C) \\otimes B = (A \\otimes B) + (C \\otimes B)$$\n  \n2.  **Distributivity**:\n  $$A \\otimes (B + D) = (A \\otimes B) + (A \\otimes D)$$\n  \n3. **Associativity**:\n\n  $$(A \\otimes B) \\otimes C = A \\otimes (B \\otimes C)$$\n:::\n\nHere are some simple examples to demonstrate the mathematical procedure to find outer product of matrices.\n\n**Example 1: Basic Outer Product of Matrices**\n\nGiven matrices:\n$$A = \\begin{pmatrix}1 & 2 \\\\3 & 4\\end{pmatrix}, \\quad B = \\begin{pmatrix}5 \\\\6\\end{pmatrix}$$\n\nThe outer product $A \\otimes B$ is:\n\n$$A \\otimes B = \\begin{pmatrix}1 \\cdot 5 & 1 \\cdot 6 \\\\2 \\cdot 5 & 2 \\cdot 6 \\\\3 \\cdot 5 & 3 \\cdot 6 \\\\4 \\cdot 5 & 4 \\cdot 6\\end{pmatrix} = \\begin{pmatrix}5 & 6 \\\\10 & 12 \\\\15 & 18 \\\\20 & 24\\end{pmatrix}$$\n\n**Example 2: Outer Product with Larger Matrices**\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}1 & 2 & 3 \\\\4 & 5 & 6\\end{pmatrix}, \\quad B = \\begin{pmatrix}7 \\\\8\\end{pmatrix}$$\n\nThe outer product $A \\otimes B$ is:\n\n$$A \\otimes B = \\begin{pmatrix}1 \\cdot 7 & 1 \\cdot 8 \\\\2 \\cdot 7 & 2 \\cdot 8 \\\\3 \\cdot 7 & 3 \\cdot 8 \\\\4 \\cdot 7 & 4 \\cdot 8 \\\\5 \\cdot 7 & 5 \\cdot 8 \\\\6 \\cdot 7 & 6 \\cdot 8\\end{pmatrix} = \\begin{pmatrix}7 & 8 \\\\14 & 16 \\\\21 & 24 \\\\28 & 32 \\\\35 & 40 \\\\42 & 48\\end{pmatrix}$$\n\nExample 3: Compute the outer product of the following vectors $\\mathbf{u} = [0, 1, 2]$ and $\\mathbf{v} = [2, 3, 4]$.\n\nTo find the outer product, we calculate each element $(i, j)$ as the product of the $(i)$-th element of $\\mathbf{u}$ and the $(j)$-th element of $\\mathbf{v}$. Mathematically:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{bmatrix}0 \\cdot 2 & 0 \\cdot 3 & 0 \\cdot 4 \\\\1 \\cdot 2 & 1 \\cdot 3 & 1 \\cdot 4 \\\\2 \\cdot 2 & 2 \\cdot 3 & 2 \\cdot 4\\end{bmatrix}= \\begin{bmatrix}0 & 0 & 0 \\\\2 & 3 & 4 \\\\4 & 6 & 8\\end{bmatrix}$$\n\n**1. Compute Outer Product of Matrices from Scratch (without Libraries)**\n\nHere’s how you can compute the outer product manually:\n\n::: {#c0440cd0 .cell execution_count=26}\n``` {.python .cell-code}\n# Define matrices A and B\nA = [[1, 2], [3, 4]]\nB = [[5], [6]]\n\n# Function to compute outer product\ndef outer_product_matrices(A, B):\n    m = len(A)\n    p = len(A[0])\n    q = len(B)\n    n = len(B[0])\n    result = [[0] * (n * p) for _ in range(m * q)]\n\n    for i in range(m):\n        for j in range(p):\n            for k in range(q):\n                for l in range(n):\n                    result[i*q + k][j*n + l] = A[i][j] * B[k][l]\n\n    return result\n\n# Compute outer product\nouter_product_result_matrices = outer_product_matrices(A, B)\n\n# Display result\nprint(\"Outer Product of Matrices (From Scratch):\")\nfor row in outer_product_result_matrices:\n    print(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of Matrices (From Scratch):\n[5, 10]\n[6, 12]\n[15, 20]\n[18, 24]\n```\n:::\n:::\n\n\nHere is the `Python` code to compute the outer product of these vectors using the `NumPy` function `.outer()`:\n\n::: {#84210469 .cell execution_count=27}\n``` {.python .cell-code}\nimport numpy as np\n\n# Define vectors\nu = np.array([[1,2],[3,4]])\nv = np.array([[5],[4]])\n\n# Compute outer product\nouter_product = np.outer(u, v)\n\nprint(\"Outer Product of u and v:\")\ndisplay(outer_product)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of u and v:\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\narray([[ 5,  4],\n       [10,  8],\n       [15, 12],\n       [20, 16]])\n```\n:::\n:::\n\n\n**Example 3: Real-world Application in Recommendation Systems**\n\nIn recommendation systems, the outer product can represent user-item interactions. A simple context is here. Let the user preferences of items is given as $u=[4, 3, 5]$ and the item scores is given by $v=[2, 5, 4]$. Now the recommendation score can be calculated as the outer product of these two vectors. Calculation of this score is shown below.\nThe outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is calculated as follows:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{bmatrix}4 \\cdot 2 & 4 \\cdot 5 & 4 \\cdot 4 \\\\3 \\cdot 2 & 3 \\cdot 5 & 3 \\cdot 4 \\\\5 \\cdot 2 & 5 \\cdot 5 & 5 \\cdot 4\\end{bmatrix}= \\begin{bmatrix}8 & 20 & 16 \\\\6 & 15 & 12 \\\\10 & 25 & 20\\end{bmatrix}$$\n\nThe python code for this task is given below.\n\n::: {#5cc3f01d .cell execution_count=28}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the user and product ratings vectors\nuser_ratings = np.array([4, 3, 5])\nproduct_ratings = np.array([2, 5, 4])\n\n# Compute the outer product\npredicted_ratings = np.outer(user_ratings, product_ratings)\n\n# Print the predicted ratings matrix\nprint(\"Predicted Ratings Matrix:\")\ndisplay(predicted_ratings)\n\n# Plot the result\nplt.imshow(predicted_ratings, cmap='coolwarm', interpolation='nearest')\nplt.colorbar()\nplt.title('Predicted Ratings Matrix (Recommendation System)')\nplt.xlabel('Product Ratings')\nplt.ylabel('User Ratings')\nplt.xticks(ticks=np.arange(len(product_ratings)), labels=product_ratings)\nplt.yticks(ticks=np.arange(len(user_ratings)), labels=user_ratings)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted Ratings Matrix:\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\narray([[ 8, 20, 16],\n       [ 6, 15, 12],\n       [10, 25, 20]])\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-epub/cell-29-output-3.png){}\n:::\n:::\n\n\n:::{.callout-note}\n### Additional Properties & Definitions\n\n1. **Definition and Properties**\n\n   Given two vectors:\n   - $\\mathbf{u} \\in \\mathbb{R}^m$\n   - $\\mathbf{v} \\in \\mathbb{R}^n$\n\n   The outer product $\\mathbf{u} \\otimes \\mathbf{v}$ results in an $m \\times n$ matrix where each element $(i, j)$ of the matrix is calculated as:\n   $$(\\mathbf{u} \\otimes \\mathbf{v})_{ij} = u_i \\cdot v_j$$\n\n2. **Non-Symmetry**\n\n   The outer product is generally not symmetric. For vectors $\\mathbf{u}$ and $\\mathbf{v}$, the matrix $\\mathbf{u} \\otimes \\mathbf{v}$ is not necessarily equal to $\\mathbf{v} \\otimes \\mathbf{u}$:\n   $$\\mathbf{u} \\otimes \\mathbf{v} \\neq \\mathbf{v} \\otimes \\mathbf{u}$$\n\n3. **Rank of the Outer Product**\n\n   The rank of the outer product matrix $\\mathbf{u} \\otimes \\mathbf{v}$ is always 1, provided neither $\\mathbf{u}$ nor $\\mathbf{v}$ is a zero vector. This is because the matrix can be expressed as a single rank-1 matrix.\n\n4. **Distributive Property**\n\n   The outer product is distributive over vector addition. For vectors $\\mathbf{u}_1, \\mathbf{u}_2 \\in \\mathbb{R}^m$ and $\\mathbf{v} \\in \\mathbb{R}^n$:\n   $$(\\mathbf{u}_1 + \\mathbf{u}_2) \\otimes \\mathbf{v} = (\\mathbf{u}_1 \\otimes \\mathbf{v}) + (\\mathbf{u}_2 \\otimes \\mathbf{v})$$\n\n5. **Associativity with Scalar Multiplication**\n\n   The outer product is associative with scalar multiplication. For a scalar $\\alpha$ and vectors $\\mathbf{u} \\in \\mathbb{R}^m$ and $\\mathbf{v} \\in \\mathbb{R}^n$:\n   $$\\alpha (\\mathbf{u} \\otimes \\mathbf{v}) = (\\alpha \\mathbf{u}) \\otimes \\mathbf{v} = \\mathbf{u} \\otimes (\\alpha \\mathbf{v})$$\n\n6. **Matrix Trace**\n\n   The trace of the outer product of two vectors is given by:\n   $$\\text{tr}(\\mathbf{u} \\otimes \\mathbf{v}) = (\\mathbf{u}^T \\mathbf{v})= (\\mathbf{v}^T \\mathbf{u})$$\n   Here, $\\text{tr}$ denotes the trace of a matrix, which is the sum of its diagonal elements.\n\n7. **Matrix Norm**\n\n   The Frobenius norm of the outer product matrix can be expressed in terms of the norms of the original vectors:\n   $$\\| \\mathbf{u} \\otimes \\mathbf{v} \\|_F = \\| \\mathbf{u} \\|_2 \\cdot \\| \\mathbf{v} \\|_2$$\n   where $\\| \\cdot \\|_2$ denotes the Euclidean norm.\n\n:::\n\n**Example Calculation in `Python`**\n\nHere’s how to compute and visualize the outer product properties using `Python`:\n\n::: {#cell-fig-op .cell execution_count=29}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define vectors\nu = np.array([1, 2, 3])\nv = np.array([4, 5])\n\n# Compute outer product\nouter_product = np.outer(u, v)\n\n# Display results\nprint(\"Outer Product Matrix:\")\nprint(outer_product)\n\n# Compute and display rank\nrank = np.linalg.matrix_rank(outer_product)\nprint(f\"Rank of Outer Product Matrix: {rank}\")\n\n# Compute Frobenius norm\nfrobenius_norm = np.linalg.norm(outer_product, 'fro')\nprint(f\"Frobenius Norm: {frobenius_norm}\")\n\n# Plot the result\nplt.imshow(outer_product, cmap='viridis', interpolation='nearest')\nplt.colorbar()\nplt.title('Outer Product Matrix')\nplt.xlabel('Vector v')\nplt.ylabel('Vector u')\nplt.xticks(ticks=np.arange(len(v)), labels=v)\nplt.yticks(ticks=np.arange(len(u)), labels=u)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product Matrix:\n[[ 4  5]\n [ 8 10]\n [12 15]]\nRank of Outer Product Matrix: 1\nFrobenius Norm: 23.958297101421877\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Demonstration of Outer Product and its Properties](module_2_files/figure-epub/fig-op-output-2.png){#fig-op}\n:::\n:::\n\n\n#### Kronecker Product\n\nIn mathematics, the Kronecker product, sometimes denoted by $\\otimes$, is an operation on two matrices of arbitrary size resulting in a *block matrix*. It is a specialization of the tensor product (which is denoted by the same symbol) from vectors to matrices and gives the matrix of the tensor product linear map with respect to a standard choice of basis. The Kronecker product is to be distinguished from the usual matrix multiplication, which is an entirely different operation. The Kronecker product is also sometimes called *matrix direct product*.\n\n:::{.callout-note}\nIf $A$ is an $m \\times n$ matrix and $B$ is a $p \\times q$ matrix, then the Kronecker product $A\\otimes B$ is the $pm \\times qn$ block matrix defined as: Each\n$a_{ij}$ of $A$ is replaced by the matrix $a_{ij}B$. Symbolically this will result in a block matrix defined by:\n\n$$A\\otimes B=\\begin{bmatrix}A \\otimes B = \\begin{bmatrix}a_{11}B & a_{12}B & \\cdots & a_{1n}B \\\\a_{21}B & a_{22}B & \\cdots & a_{2n}B \\\\\\vdots & \\vdots & \\ddots & vdots \\\\a_{m1}B & a_{m2}B & \\cdots & a_{mn}B\\end{bmatrix} \\end{bmatrix}$$\n:::\n\n:::{.callout-note}\n\n#### Properties of the Kronecker Product\n\n1. **Associativity**\n\n   The Kronecker product is associative. For matrices $A \\in \\mathbb{R}^{m \\times n}$, $B \\in \\mathbb{R}^{p \\times q}$, and $C \\in \\mathbb{R}^{r \\times s}$:\n   $$(A \\otimes B) \\otimes C = A \\otimes (B \\otimes C)$$\n\n2. **Distributivity Over Addition**\n\n   The Kronecker product distributes over matrix addition. For matrices $A \\in \\mathbb{R}^{m \\times n}$, $B \\in \\mathbb{R}^{p \\times q}$, and $C \\in \\mathbb{R}^{p \\times q}$:\n   $$A \\otimes (B + C) = (A \\otimes B) + (A \\otimes C)$$\n\n3. **Mixed Product Property**\n\n   The Kronecker product satisfies the mixed product property with the matrix product. For matrices $A \\in \\mathbb{R}^{m \\times n}$, $B \\in \\mathbb{R}^{p \\times q}$, $C \\in \\mathbb{R}^{r \\times s}$, and $D \\in \\mathbb{R}^{r \\times s}$:\n   $$(A \\otimes B) (C \\otimes D) = (A C) \\otimes (B D)$$\n\n4. **Transpose**\n\n   The transpose of the Kronecker product is given by:\n   $$(A \\otimes B)^T = A^T \\otimes B^T$$\n\n5. **Norm**\n\n   The Frobenius norm of the Kronecker product can be computed as:\n  $$\\| A \\otimes B \\|_F = \\| A \\|_F \\cdot \\| B \\|_F$$\n   where $\\| \\cdot \\|_F$ denotes the Frobenius norm.\n:::\n\n----\n\n:::{.callout-tip}\n\n\n#### Frobenius Norm\n\nThe Frobenius norm, also known as the Euclidean norm for matrices, is a measure of a matrix's magnitude. It is defined as the square root of the sum of the absolute squares of its elements. Mathematically, for a matrix $A$ with elements $a_{ij}$, the Frobenius norm is given by:\n\n$$\\|A\\|_F = \\sqrt{\\sum_{i,j} |a_{ij}|^2}$$\n\n:::\n\nExample 1: Calculation of Frobenius Norm\n\nConsider the matrix $A$:\n\n$$A = \\begin{bmatrix}1 & 2 \\\\3 & 4\\end{bmatrix}$$\n\nTo compute the Frobenius norm:\n\n$$\\|A\\|_F = \\sqrt{1^2 + 2^2 + 3^2 + 4^2}= \\sqrt{1 + 4 + 9 + 16}= \\sqrt{30}\\approx 5.48$$\n\nExample 2: Frobenius Norm of a Sparse Matrix\n\nConsider the sparse matrix $B$:\n\n$$B = \\begin{bmatrix}0 & 0 & 0 \\\\0 & 5 & 0 \\\\0 & 0 & 0\\end{bmatrix}$$\n\nTo compute the Frobenius norm:\n\n$$\\|B\\|_F = \\sqrt{0^2 + 0^2 + 0^2 + 5^2 + 0^2 + 0^2}= \\sqrt{25}= 5$$\n\nExample 3: Frobenius Norm in a Large Matrix\n\nConsider the matrix $C$ of size $3 \\times 3 $:\n\n$$C = \\begin{bmatrix}1 & 2 & 3 \\\\4 & 5 & 6 \\\\7 & 8 & 9\\end{bmatrix}$$\n\nTo compute the Frobenius norm:\n\n\\begin{align*}\n\\|C\\|_F &= \\sqrt{1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2}\\\\\n&= \\sqrt{1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81}\n&= \\sqrt{285}\n&\\approx 16.88\n\\end{align*}\n\n**Applications of the Frobenius Norm**\n\n- *Application 1: Image Compression:* In image processing, the Frobenius norm can measure the difference between the original and compressed images, indicating how well the compression has preserved the original image quality.\n\n- *Application 2: Matrix Factorization:* In numerical analysis, Frobenius norm is used to evaluate the error in matrix approximations, such as in Singular Value Decomposition (SVD). A lower Frobenius norm of the error indicates a better approximation.\n\n- *Application 3: Error Measurement in Numerical Solutions:* In solving systems of linear equations, the Frobenius norm can be used to measure the error between the true solution and the computed solution, providing insight into the accuracy of numerical methods.\n\nThe `linalg` sub module of `NumPy` library can be used to calculate various norms. Basically norm is the generalized form of Euclidean distance.\n\n::: {#7985b5dd .cell execution_count=30}\n``` {.python .cell-code}\nimport numpy as np\n\n# Example 1: Simple Matrix\nA = np.array([[1, 2], [3, 4]])\nfrobenius_norm_A = np.linalg.norm(A, 'fro')\nprint(f\"Frobenius Norm of A: {frobenius_norm_A:.2f}\")\n\n# Example 2: Sparse Matrix\nB = np.array([[0, 0, 0], [0, 5, 0], [0, 0, 0]])\nfrobenius_norm_B = np.linalg.norm(B, 'fro')\nprint(f\"Frobenius Norm of B: {frobenius_norm_B:.2f}\")\n\n# Example 3: Large Matrix\nC = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfrobenius_norm_C = np.linalg.norm(C, 'fro')\nprint(f\"Frobenius Norm of C: {frobenius_norm_C:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrobenius Norm of A: 5.48\nFrobenius Norm of B: 5.00\nFrobenius Norm of C: 16.88\n```\n:::\n:::\n\n\n**Frobenius norm of Kronecker product**\n\nLet us consider two matrices,\n\n$$A = \\begin{bmatrix}1 & 2 \\\\3 & 4\\end{bmatrix}$$\n\nand\n\n$$B = \\begin{bmatrix}0 & 5 \\\\6 & 7\\end{bmatrix}$$\n\nThe Kronecker product $C = A \\otimes B$ is:\n\n$$C = \\begin{bmatrix}1 \\cdot B & 2 \\cdot B \\\\3 \\cdot B & 4 \\cdot B\\end{bmatrix}= \\begin{bmatrix}\\begin{bmatrix}0 & 5 \\\\6 & 7\\end{bmatrix} & \\begin{bmatrix}0 \\cdot 2 & 5 \\cdot 2 \\\\6 \\cdot 2 & 7 \\cdot 2\\end{bmatrix} \\\\\\begin{bmatrix}0 \\cdot 3 & 5 \\cdot 3 \\\\6 \\cdot 3 & 7 \\cdot 3\\end{bmatrix} & \\begin{bmatrix}0 \\cdot 4 & 5 \\cdot 4 \\\\6 \\cdot 4 & 7 \\cdot 4\\end{bmatrix}\\end{bmatrix}$$\n\nThis expands to:\n\n$$C = \\begin{bmatrix}0 & 5 & 0 & 10 \\\\6 & 7 & 12 & 14 \\\\0 & 15 & 0 & 20 \\\\18 & 21 & 24 & 28\\end{bmatrix}$$\n\n*Computing the Frobenius Norm*\n\nTo compute the Frobenius norm of $C$:\n\n$$\\|C\\|_F = \\sqrt{\\sum_{i=1}^{4} \\sum_{j=1}^{4} |c_{ij}|^2}$$\n\n$$\\|C\\|_F = \\sqrt{0^2 + 5^2 + 0^2 + 10^2 + 6^2 + 7^2 + 12^2 + 14^2 + 0^2 + 15^2 + 0^2 + 20^2 + 18^2 + 21^2 + 24^2 + 28^2}$$\n\n$$\\|C\\|_F = \\sqrt{0 + 25 + 0 + 100 + 36 + 49 + 144 + 196 + 0 + 225 + 0 + 400 + 324 + 441 + 576 + 784}$$\n\n$$\\|C\\|_F = \\sqrt{2896}$$\n$$\\|C\\|_F \\approx 53.87$$\n\n----\n\n#### Practice Problems\n\n**Find the Kronecker product of A and B where A and B are given as follows:**\n\n**Problem 1:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}1&2\\\\3&4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}0&1\\\\1&0\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1&2\\\\3&4\\end{bmatrix} \\otimes \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} & 2 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} \\\\\n3 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} & 4 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 & 1 & 0 & 2 \\\\\n1 & 0 & 2& 0\\\\\n0 & 3 & 0 & 4 \\\\\n3 & 0 & 4 & 0\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 2:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}2&3\\\\4&5\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1&0\\\\0&1\\end{bmatrix} \\otimes \\begin{bmatrix}2&3\\\\4&5\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot \\begin{bmatrix}2&3\\\\4&5\\end{bmatrix} & 0 \\cdot \\begin{bmatrix}2&3\\\\4&5\\end{bmatrix} \\\\\n0 \\cdot \\begin{bmatrix}2&3\\\\4&5\\end{bmatrix} & 1 \\cdot \\begin{bmatrix}2&3\\\\4&5\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n2 & 3 & 0 & 0 \\\\\n4 & 5 & 0 & 0 \\\\\n0 & 0 & 2 & 3 \\\\\n0 & 0 & 4 & 5\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 3:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}1&2\\end{bmatrix}$$\n$$B=\\begin{bmatrix}3\\\\4\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1&2\\end{bmatrix} \\otimes \\begin{bmatrix}3\\\\4\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot \\begin{bmatrix}3\\\\4\\end{bmatrix} & 2 \\cdot \\begin{bmatrix}3\\\\4\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n3 & 6 \\\\\n4 & 8\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 4:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}0&1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}1&-1\\\\2&0\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}0&1\\end{bmatrix} \\otimes \\begin{bmatrix}1&-1\\\\2&0\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 \\cdot \\begin{bmatrix}1&-1\\\\2&0\\end{bmatrix} & 1 \\cdot \\begin{bmatrix}1&-1\\\\2&0\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 & 0 &1&-1\\\\\n0 & 0&2&0 \\\\\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 5:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}2\\\\3\\end{bmatrix}$$\n$$B=\\begin{bmatrix}4&-2\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}2\\\\3\\end{bmatrix} \\otimes \\begin{bmatrix}4&-2\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n2 \\cdot \\begin{bmatrix}4&-2\\end{bmatrix} \\\\\n3 \\cdot \\begin{bmatrix}4&-2\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n8 & -4 \\\\\n12 & -6\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 6:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}1&-1\\\\0&2\\end{bmatrix}$$\n$$B=\\begin{bmatrix}0&1\\\\1&0\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1&-1\\\\0&2\\end{bmatrix} \\otimes \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} & -1 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} \\\\\n0 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix} & 2 \\cdot \\begin{bmatrix}0&1\\\\1&0\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 & 1 & 0 & -1 \\\\\n1 & 0 & -1 & 0 \\\\\n0 & 0 & 0 & 2 \\\\\n0 & 0 & 2 & 0\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 7:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}2\\end{bmatrix}$$\n$$B=\\begin{bmatrix}3&4\\\\5&6\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}2\\end{bmatrix} \\otimes \\begin{bmatrix}3&4\\\\5&6\\end{bmatrix} \\\\\n&= 2 \\cdot \\begin{bmatrix}3&4\\\\5&6\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n6 & 8 \\\\\n10 & 12\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 8:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}0&1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}0&1\\end{bmatrix} \\otimes \\begin{bmatrix}1&0\\\\0&1\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 \\cdot \\begin{bmatrix}1&0\\\\0&1\\end{bmatrix} & 1 \\cdot \\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 & 0 \\\\\n0 & 1\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 9:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}1&0\\\\0&1\\end{bmatrix}$$\n$$B=\\begin{bmatrix}1&1\\\\1&1\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}1&0\\\\0&1\\end{bmatrix} \\otimes \\begin{bmatrix}1&1\\\\1&1\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 \\cdot \\begin{bmatrix}1&1\\\\1&1\\end{bmatrix} & 0 \\cdot \\begin{bmatrix}1&1\\\\1&1\\end{bmatrix} \\\\\n0 \\cdot \\begin{bmatrix}1&1\\\\1&1\\end{bmatrix} & 1 \\cdot \\begin{bmatrix}1&1\\\\1&1\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n1 & 1 & 0 & 0 \\\\\n1 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 1 \\\\\n0 & 0 & 1 & 1\n\\end{bmatrix}\n\\end{align*}\n\n---\n\n**Problem 10:**\n\nFind the Kronecker product of:\n$$A=\\begin{bmatrix}2&-1\\\\3&4\\end{bmatrix}$$\n$$B=\\begin{bmatrix}0&5\\\\-2&3\\end{bmatrix}$$\n\n**Solution:**\n\n\\begin{align*}\nA \\otimes B &= \\begin{bmatrix}2&-1\\\\3&4\\end{bmatrix} \\otimes \\begin{bmatrix}0&5\\\\-2&3\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n2 \\cdot \\begin{bmatrix}0&5\\\\-2&3\\end{bmatrix} & -1 \\cdot \\begin{bmatrix}0&5\\\\-2&3\\end{bmatrix} \\\\\n3 \\cdot \\begin{bmatrix}0&5\\\\-2&3\\end{bmatrix} & 4 \\cdot \\begin{bmatrix}0&5\\\\-2&3\\end{bmatrix}\n\\end{bmatrix} \\\\\n&= \\begin{bmatrix}\n0 & 10 & 0 & -5 \\\\\n-4 & 6 & 2 & -3 \\\\\n0 & 15 & 0 & 20 \\\\\n-6 & 9 & -8 & 12\n\\end{bmatrix}\n\\end{align*}\n\n----\n\n#### Connection Between Outer Product and Kronecker Product\n\n1. **Conceptual Connection:**\n\n   - The **outer product** is a special case of the **Kronecker product**. Specifically, if $\\mathbf{A}$ is a column vector and $\\mathbf{B}$ is a row vector, then $\\mathbf{A}$ is a $m \\times 1$ matrix and $\\mathbf{B}$ is a $1 \\times n$ matrix. The Kronecker product of these two matrices will yield the same result as the outer product of these vectors.\n\n   - For matrices $\\mathbf{A}$ and $\\mathbf{B}$, the Kronecker product involves taking the outer product of each element of $\\mathbf{A}$ with the entire matrix $\\mathbf{B}$.\n\n2. **Mathematical Formulation:**\n\n   - Let $\\mathbf{A} = \\begin{bmatrix}a_{11} & a_{12}\\\\ a_{21} & a_{22}\\end{bmatrix}$ and $\\mathbf{B} = \\begin{bmatrix}b_{11} & b_{12}\\\\ b_{21} & b_{22}\\end{bmatrix}$. Then:\n\n   $$\\mathbf{A} \\otimes \\mathbf{B} = \\begin{bmatrix} a_{11} \\mathbf{B} & a_{12} \\mathbf{B} \\\\ a_{21} \\mathbf{B} & a_{22} \\mathbf{B} \\end{bmatrix}$$\n\n   - If $\\mathbf{A} = \\mathbf{u} \\mathbf{v}^T$ where $\\mathbf{u}$ is a column vector and $\\mathbf{v}^T$ is a row vector, then the Kronecker product of $\\mathbf{u}$ and $\\mathbf{v}^T$ yields the same result as the outer product $\\mathbf{u} \\otimes \\mathbf{v}$.\n\n\n:::{.callout-note}\n**Summary**\n\n- The **outer product** is a specific case of the **Kronecker product** where one of the matrices is a vector (either row or column). \n- The **Kronecker product** generalizes the outer product to matrices and is more versatile in applications involving tensor products and higher-dimensional constructs.\n\n:::\n\n#### Matrix Multiplication as Kronecker Product\n\nGiven matrices $\\mathbf{A}$ and $\\mathbf{B}$, where:\n- $\\mathbf{A}$ is an $m \\times n$ matrix\n- $\\mathbf{B}$ is an $n \\times p$ matrix\n\nThe product $\\mathbf{C} = \\mathbf{A} \\mathbf{B}$ can be expressed using Kronecker products as:\n\n$$\\mathbf{C} = \\sum_{k=1}^n (\\mathbf{A}_{:,k} \\otimes \\mathbf{B}_{k,:})$$\n\nwhere:\n- $\\mathbf{A}_{:,k}$ denotes the $k$-th column of matrix $\\mathbf{A}$\n- $\\mathbf{B}_{k,:}$ denotes the $k$-th row of matrix $\\mathbf{B}$\n\n**Example:**\n\nLet:\n\n$$\\mathbf{A} = \\begin{bmatrix}1 & 2 \\\\3 & 4\\end{bmatrix}$$\n\nand:\n\n$$\\mathbf{B} = \\begin{bmatrix}0 & 1 \\\\1 & 0\\end{bmatrix}$$\n\nTo find $\\mathbf{C} = \\mathbf{A} \\mathbf{B}$ using Kronecker products:\n\n1. **Compute the Kronecker Product of Columns of $\\mathbf{A}$ and Rows of $\\mathbf{B}$:**\n\n   - For column $\\mathbf{A}_{:,1} = \\begin{bmatrix} 1 \\\\ 3 \\end{bmatrix}$ and row $\\mathbf{B}_{1,:} = \\begin{bmatrix} 0 & 1 \\end{bmatrix}$:\n     $$\\mathbf{A}_{:,1} \\otimes \\mathbf{B}_{1,:} = \\begin{bmatrix}     0 & 1 \\\\     0 & 3     \\end{bmatrix}$$\n\n   - For column $\\mathbf{A}_{:,2} = \\begin{bmatrix} 2 \\\\ 4 \\end{bmatrix}$ and row $\\mathbf{B}_{2,:} = \\begin{bmatrix} 1 & 0 \\end{bmatrix}$:\n     $$\\mathbf{A}_{:,2} \\otimes \\mathbf{B}_{2,:} = \\begin{bmatrix}2 & 0 \\\\ 4 & 0\\end{bmatrix}$$\n     \n2. **Sum the Kronecker Products:**\n\n   $$\\mathbf{C} = \\begin{bmatrix}0 & 1 \\\\ 0 & 3\\end{bmatrix} +\\begin{bmatrix} 2 & 0 \\\\ 4 & 0 \\end{bmatrix}  = \\begin{bmatrix} 2 & 1 \\\\ 4 & 3\\end{bmatrix}$$\n\n----\n\nIn the previous block we have discussed the Frobenius norm and its applications. Now came back to the discussions on the Kronecker product. The Kronecker product is particularly useful in scenarios where interactions between different types of data need to be modeled comprehensively. In recommendation systems, it allows us to integrate user preferences with item relationships to improve recommendation accuracy.\n\nIn addition to recommendation systems, Kronecker products are used in various fields such as:\n\n-  Signal Processing: For modeling multi-dimensional signals.\n- Machine Learning: In building features for complex models.\n- Communication Systems: For modeling network interactions.\n\nBy understanding the Kronecker product and its applications, we can extend it to solve complex problems and enhance systems across different domains. To understand the practical use of Kronecker product in a Machine Learning scenario let us consider the following problem statement and its solution.\n\n:::{.callout-note}\n### Problem statement\nIn the realm of recommendation systems, predicting user preferences for various product categories based on past interactions is a common challenge. Suppose we have data on user preferences for different products and categories. We can use this data to recommend the best products for each user by employing mathematical tools such as the Kronecker product. The User Preference and Category relationships are given in @tbl-UPM and @tbl-CRM\n.\n\n\n| User/Item  | Electronics | Clothing | Books |\n|------------|-------------|----------|-------|\n| User 1     | 5           | 3        | 4     |\n| User 2     | 2           | 4        | 5     |\n| User 3     | 3           | 4        | 4     |\n\n: User Preference {#tbl-UPM}\n\n\n| Category/Feature | Feature 1 | Feature 2 | Feature 3 |\n|------------------|-----------|-----------|-----------|\n| Electronics      | 1         | 0         | 0         |\n| Clothing         | 0         | 1         | 1         |\n| Books            | 0         | 1         | 1         |\n\n: Category Relationships {#tbl-CRM}\n\n Predict user preferences for different product categories using the Kronecker product matrix.\n:::\n\n>**Solution Procedure**\n\n1. *Compute the Kronecker Product:*\n   Calculate the Kronecker product of matrices $U$ and $C$ to obtain matrix $K$.\n\n   To model the problem, we use the Kronecker product of the user preference matrix $U$ and the category relationships matrix $C$. This product allows us to predict the user’s rating for each category by combining their preferences with the category features.\n\n  *Formulating Matrices*\n\n   User Preference Matrix (U):\n   - Dimension: $3\\times 3$ (3 users, 3 items)\n   - from the User preference data, we can create the User Preference Matrix as follows:\n\n  $$U = \\begin{pmatrix}5 & 3 & 4 \\\\2 & 4 & 5 \\\\3 & 4 & 4 \\end{pmatrix}$$\n\n   Category Relationships Matrix (C):\n   - Dimension: $3 \\times 3$ (3 categories)\n   - from the Category Relationships data, we can create the Category Relationship Matrix as follows:\n\n  $$C = \\begin{pmatrix}1 & 0 & 0 \\\\ 0 & 1 & 1 \\\\ 0 & 1 & 1\\end{pmatrix}$$\n\n  *Kronecker Product Calculation*\n\nThe Kronecker product $K$ of $U$ and $C$ is calculated as follows:\n\n  1. **Matrix Dimensions:**\n   - $U$ is $3 \\times 3$ (3 users, 3 items).\n   - $C$ is $3 \\times 3$ (3 categories, 3 features).\n\n  2. **Calculate Kronecker Product:**\n   - For each element $u_{ij}$ in $U$, multiply by the entire matrix $C$.\n\n   The Kronecker product $K$ is computed as:\n\n  $$K = U \\otimes C$$\n\n   Explicitly, the Kronecker product $K$ is:\n\n  $$K = \\begin{pmatrix}5 \\cdot C & 3 \\cdot C & 4 \\cdot C \\\\ 2 \\cdot C & 4 \\cdot C & 5 \\cdot C \\\\    3 \\cdot C & 4 \\cdot C & 4 \\cdot C\\end{pmatrix}$$\n\n   As an example the blocks in first row are:\n\n  $$5 \\cdot C = \\begin{pmatrix}   5 & 0 & 0 \\\\   0 & 5 & 5 \\\\   0 & 5 & 5   \\end{pmatrix}, \\quad    3 \\cdot C = \\begin{pmatrix}   3 & 0 & 0 \\\\   0 & 3 & 3 \\\\   0 & 3 & 3   \\end{pmatrix}, \\quad   4 \\cdot C = \\begin{pmatrix}   4 & 0 & 0 \\\\   0 & 4 & 4 \\\\   0 & 4 & 4   \\end{pmatrix}$$\n\n   Combining these blocks:\n\n  $$K = \\begin{pmatrix}   5 & 0 & 0 & 3 & 0 & 0 & 4 & 0 & 0\\\\   0 & 5 & 5 & 0 & 3 & 3 & 0 & 4 & 4\\\\   0 & 5 & 5 & 0 & 3 & 3 & 0 & 4 & 4\\\\   2 & 0 & 0 & 4 & 0 & 0 & 5 & 0 & 0\\\\   0 & 2 & 2 & 0 & 4 & 4 & 0 & 5 & 5\\\\   0 & 2 & 2 & 0 & 4 & 4 & 0 & 5 & 5\\\\   3 & 0 & 0 & 4 & 0 & 0 & 4 & 0 & 0\\\\   0 & 3 & 3 & 0 & 4 & 4 & 0 & 4 & 4\\\\   0 & 3 & 3 & 0 & 4 & 4 & 0 & 4 & 4\\end{pmatrix}$$\n\n2. **Interpret the Kronecker Product Matrix:**\n   The resulting matrix $K$ represents all possible combinations of user preferences and category features.\n\n3. **Predict Ratings:**\n   For each user, use matrix $K$ to predict the rating for each category by summing up the values in the corresponding rows.\n\n4. **Generate Recommendations:**\n   Identify the top categories with the highest predicted ratings for each user.\n\nThe `python` code to solve this problem computationally is given below.\n\n::: {#390be5b0 .cell execution_count=31}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Define the matrices\nU = np.array([[5, 3, 4],\n              [2, 4, 5],\n              [3, 4, 4]])\n\nC = np.array([[1, 0, 0],\n              [0, 1, 1],\n              [0, 1, 1]])\n\n# Compute the Kronecker product\nK = np.kron(U, C)\n\n# Create a DataFrame to visualize the Kronecker product matrix\ndf_K = pd.DataFrame(K, \n                    columns=['Electronics_F1', 'Electronics_F2', 'Electronics_F3', \n                             'Clothing_F1', 'Clothing_F2', 'Clothing_F3', \n                             'Books_F1', 'Books_F2', 'Books_F3'],\n                    index=['User 1 Electronics', 'User 1 Clothing', 'User 1 Books', \n                           'User 2 Electronics', 'User 2 Clothing', 'User 2 Books', \n                           'User 3 Electronics', 'User 3 Clothing', 'User 3 Books'])\n\n# Print the Kronecker product matrix\nprint(\"Kronecker Product Matrix (K):\\n\", df_K)\n\n# Predict ratings and create recommendations\ndef recommend(user_index, top_n=3):\n    \"\"\" Recommend top_n categories for a given user based on Kronecker product matrix. \"\"\"\n    user_ratings = K[user_index * len(C):(user_index + 1) * len(C), :]\n    predicted_ratings = np.sum(user_ratings, axis=0)\n    recommendations = np.argsort(predicted_ratings)[::-1][:top_n]\n    return recommendations\n\n# Recommendations for User 1\nuser_index = 0  # User 1\ntop_n = 3\nrecommendations = recommend(user_index, top_n)\n\nprint(f\"\\nTop {top_n} recommendations for User {user_index + 1}:\")\nfor rec in recommendations:\n    print(df_K.columns[rec])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKronecker Product Matrix (K):\n                     Electronics_F1  Electronics_F2  Electronics_F3  \\\nUser 1 Electronics               5               0               0   \nUser 1 Clothing                  0               5               5   \nUser 1 Books                     0               5               5   \nUser 2 Electronics               2               0               0   \nUser 2 Clothing                  0               2               2   \nUser 2 Books                     0               2               2   \nUser 3 Electronics               3               0               0   \nUser 3 Clothing                  0               3               3   \nUser 3 Books                     0               3               3   \n\n                    Clothing_F1  Clothing_F2  Clothing_F3  Books_F1  Books_F2  \\\nUser 1 Electronics            3            0            0         4         0   \nUser 1 Clothing               0            3            3         0         4   \nUser 1 Books                  0            3            3         0         4   \nUser 2 Electronics            4            0            0         5         0   \nUser 2 Clothing               0            4            4         0         5   \nUser 2 Books                  0            4            4         0         5   \nUser 3 Electronics            4            0            0         4         0   \nUser 3 Clothing               0            4            4         0         4   \nUser 3 Books                  0            4            4         0         4   \n\n                    Books_F3  \nUser 1 Electronics         0  \nUser 1 Clothing            4  \nUser 1 Books               4  \nUser 2 Electronics         0  \nUser 2 Clothing            5  \nUser 2 Books               5  \nUser 3 Electronics         0  \nUser 3 Clothing            4  \nUser 3 Books               4  \n\nTop 3 recommendations for User 1:\nElectronics_F2\nElectronics_F3\nBooks_F3\n```\n:::\n:::\n\n\nA simple visualization of this recomendation system is shown in [Fig @fig-reco].\n\n::: {#cell-fig-reco .cell execution_count=32}\n``` {.python .cell-code}\n# Visualization\ndef plot_recommendations(user_index):\n    \"\"\" Plot the predicted ratings for each category for a given user. \"\"\"\n    user_ratings = K[user_index * len(C):(user_index + 1) * len(C), :]\n    predicted_ratings = np.sum(user_ratings, axis=0)\n    categories = df_K.columns\n    plt.figure(figsize=(6, 5))\n    plt.bar(categories, predicted_ratings)\n    plt.xlabel('Categories')\n    plt.ylabel('Predicted Ratings')\n    plt.title(f'Predicted Ratings for User {user_index + 1}')\n    plt.xticks(rotation=45)\n    plt.show()\n\n# Plot recommendations for User 1\nplot_recommendations(user_index)\n```\n\n::: {.cell-output .cell-output-display}\n![EDA for the Recommendation System](module_2_files/figure-epub/fig-reco-output-1.png){#fig-reco}\n:::\n:::\n\n\nThis micro project illustrate one of the popular use of Kronecker product on ML application.\n\n### Matrix Measures of Practical Importance\n\nMatrix measures, such as rank and determinant, play crucial roles in linear algebra. While both rank and determinant provide valuable insights into the properties of a matrix, they serve different purposes. Understanding their roles and applications is essential for solving complex problems in computer science, engineering, and applied mathematics.\n\n#### Determinant\n\nDeterminant of a $2\\times 2$ matrix $A=\\begin{pmatrix}a&b\\\\c&d\\end{pmatrix}$ is defined as $|A|=ad-bc$. Determinant of higher order square matrices can be found using the Laplace method or Sarrus method.\n\nThe determinant of a matrix provides information about the matrix's invertibility and scaling factor for volume transformation. Specifically:\n\n1. *Invertibility:* A matrix is invertible if and only if its determinant is non-zero.\n\n2. *Volume Scaling:* The absolute value of the determinant gives the scaling factor by which the matrix transforms volume.\n3. *Parallelism:* If the determinant of a matrix composed of vectors is zero, the vectors are linearly dependent, meaning they are parallel or redundant.\n4. *Redundancy:*  A zero determinant indicates that the vectors span a space of lower dimension than the number of vectors, showing redundancy.\n\n:::{.callout-important}\n## Least Possible Values of Determinant\n\n1. *Least Positive Determinant:* For a $1\\times 1$ matrix, the smallest non-zero determinant is any positive value, typically $\\epsilon$, where  $\\epsilon$ is a small positive number.\n2. Least Non-Zero Determinant: For higher-dimensional matrices, the smallest non-zero determinant is a non-zero value that represents the smallest area or volume spanned by the matrix's rows or columns. For example a $2\\times 2$ matrix with determinant $\\epsilon$ could be:\n$$B=\\begin{pmatrix}\\epsilon&0\\\\ 0&\\epsilon\\end{pmatrix}$$\nHere, $\\epsilon$ is a small positive number, indicating a very small but *non-zero* area.\n:::\n\nNow let's look into the most important matrix measure for advanced application in Linear Algebra.\n\nAs we know the matrix is basically a representation tool that make things abstract- remove unnecessary details. Then the matrix itself can be represented in many ways. This is the real story telling with this most promising mathematical structure. Consider a context of collecting feedback about a product in three aspects- cost, quality and practicality. For simplicity in calculation, we consider responses from 3 customers only. The data is shown in @tbl-RT.\n\n| User   | Cost | Quality | Practicality |\n|--------|------|---------|--------------|\n| User-1 | 1    | 4       | 5            |\n| User-2 | 3    | 2       | 5            |\n| User-3 | 2    | 1       | 3            |\n\n: User rating of a consumer product {#tbl-RT}\n\nIt's perfect and nice looking. But both mathematics and a computer can't handle this table as it is. So we create an abstract representation of this data- the rating matrix. Using the traditional approach, let's represent this rating data as:\n$$A=\\begin{bmatrix}1&4&5\\\\3&2&5\\\\2&1&3\\end{bmatrix}$$\n\nNow both the column names and row indices were removed and the data is transformed into the abstract form. This representation has both advantages and disadvantages. Be positive! So we are focused only in the advantages.\n\nJust consider the product. Its sales fully based on its features. So the product sales perspective will be represented in terms of the features- cost, quality and practicality. These features are columns of our rating matrix. Definitly peaple will have different rating for these features. Keeping all these in mind let's introduce the concept of *linear combination*. This leads to a new matrix product as shown below.\n\\begin{align*}\nAx&=\\begin{bmatrix}1&4&5\\\\3&2&5\\\\2&1&3\\end{bmatrix}x\\\\\n&=\\begin{bmatrix}1&4&5\\\\3&2&5\\\\2&1&3\\end{bmatrix}\\cdot\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}\\\\\n&=\\begin{bmatrix}\\begin{bmatrix}1\\\\3\\\\2\\end{bmatrix}x_1+\\begin{bmatrix}4\\\\2\\\\1\\end{bmatrix}x_2+\\begin{bmatrix}5\\\\5\\\\3\\end{bmatrix}x_3\n\\end{align*}\n\nAs the number of users increases, the product sales perspective become more informative. In short the span of the features define the feature space of the product. In real cases, a manufacture wants to know what are the features really inflence the customers. This new matrix product will help the manufactures to identify that features! \n\nSo we are going to define this new matrix product as the feature space, that will provide more insights to this context as:\n\n$$A=CR$$\n\nWhere $C$ is the column space and $R$ is the row reduced Echelon form of $A$. But the product is not the usual scalar projection, Instead the weight of linear combination of elements in the column space.\n\nLet's formally illustrate this in our example. From the first observation itself, it is clear that last column is just the sum of first and second columns (That is in our context the feature 'practicality' is just depends on 'cost' and 'quality'. meaningful?). So only first columns are independent and so spans the column space. \n\n$$C=\\begin{bmatrix}1&4\\\\3&2\\\\2&1\\end{bmatrix}$$\n\nNow look into the matrix $R$. Applying elementary row tansformations, $A$ will transformed into:\n\n$$R=\\begin{bmatrix}1&0&1\\\\0&1&1\\\\0&0&0\\end{bmatrix}$$\n\nHence we can form a decomposition for the given rating matrix, $A$ as:\n\\begin{align*}\nA&=CR\\\\\n&=\\begin{bmatrix}1&4\\\\3&2\\\\2&1\\end{bmatrix}\\begin{bmatrix}1&0&1\\\\0&1&1\\\\\\mbox{}&&\\end{bmatrix}\n\\end{align*}\n\n\nThis decomposition says that there are only two independent features (columns) and the third feature (column) is the sum of first two features (columns). \n\n:::{.callout-important}\n#### Interpretation of the $R$ matrix\n\nEach column in the $R$ matrix represents the weights for linear combination of vectors in the column space to get that column in $A$. In this example, third column of $R$ is $\\begin{bmatrix}1\\\\1\\end{bmatrix}$. This means that third column of $A$ will be $1\\times C_1+1\\times C_2$ of the column space, $C$!\n:::\n\nThis first matrix decompostion donate a new type of matrix product (outer product) and a new measure- the number of independent columns and number of independent rows. This count is called the *rank* of the matrix $A$. In the case of features, if the rank of the column space is less than the number of features then definitly a less number of feature set will perfectly represent the data. This will help us to reduce the dimension of the dataset and there by reducing computational complexities in data analysis and machine Learning jobs.\n\nIn the above discussion, we consider only the columns of $A$. Now we will mention the row space. It is the set of all linearly independent rows of $A$. For any matrix $A$, both the row space and column space are of same rank. This correspondance is a helpful result in many practical applications. \n\nNow we consider a stable equation, $Ax=0$. With the usual notation of dot product, it implies that $x$ is orthogonal to $A$. Set of all those independent vectors which are orthogonal to $A$ constitute a new space of interest. It is called the *null space* of $A$. If $A$ represents a linear transformation, then the null space will be populated by those non-zero vectors which are *nullified* by the transformation $A$. As a summary of this discussion, the row space and null space of a matrix $A$ creates an orthogonal system. Considering the relationship between $A$ and $A^T$, it is clear that row space of $A$ is same as the column space of $A^T$ and vice verse are. So we can restate the orthogonality as: 'the null space of $A$ is orthogonal to the column space of $A^T$' and 'the null space of $A^T$ is orthogonal to the column space of $A$'. Mathematically this property can be represents as follows.\n\n::: {#note-ortho .callout-note}\n\n\\begin{align*}\n\\mathcal{N}(A)&\\perp \\mathcal{C}(A^T)\\\\\n\\mathcal{N}(A^T)&\\perp \\mathcal{C}(A)\n\\end{align*}\n:::\n\nIn the given example, solving $Ax=0$  we get $x=\\begin{bmatrix}1&1&-1\\end{bmatrix}^T$. \n\nSo the rank of $\\mathcal{N}(A)=1$. Already we have rank of $A=2$. This leads to an interesting result:\n\n$$\\text{Rank}(A)+\\text{Rank}(\\mathcal{N}(A))=3$$\n\nThis observation can be framed as a theorem.\n\n### Rank Nullity Theorem\n\nThe rank-nullity theorem is a fundamental theorem in linear algebra that is important for understanding the connections between mathematical operations in engineering, physics, and computer science. It states that the sum of the rank and nullity of a matrix equals the number of columns in the matrix. The rank is the maximum number of linearly independent columns, and the nullity is the dimension of the nullspace. \n\n:::{#thm-RNT }\n\n#### Rank Nullitty Theorem\n\nThe Rank-Nullity Theorem states that for any $m \\times n$ matrix $A$, the following relationship holds:\n\n$$\n\\text{Rank}(A) + \\text{Nullity}(A) = n\n$$\n\nwhere:\n- **Rank** of $A$ is the dimension of the column space of $A$, which is also equal to the dimension of the row space of $A$.\n- **Nullity** of $A$ is the dimension of the null space of $A$, which is the solution space to the homogeneous system $A \\mathbf{x} = \\mathbf{0}$.\n:::\n\n*Steps to Formulate for Matrix $A$*\n\n1. **Find the Rank of $A$**:\n   The rank of a matrix is the maximum number of linearly independent columns (or rows). It can be determined by transforming $A$ into its row echelon form or reduced row echelon form (RREF).\n\n2. **Find the Nullity of $A$**:\n   The nullity is the dimension of the solution space of $A \\mathbf{x} = \\mathbf{0}$. This can be found by solving the homogeneous system and counting the number of free variables.\n\n3. **Apply the Rank-Nullity Theorem**:\n   Use the rank-nullity theorem to verify the relationship.\n\n-----\n\n*Example 1:* Calculate the rank and nullity of $A=\\begin{bmatrix}   1 & 4 & 5 \\\\   3 & 2 & 5 \\\\   2 & 1 & 3   \\end{bmatrix}$ and verify the rank nullity theorem.\n\n1. **Row Echelon Form**:\n\n   Perform Gaussian elimination on $A$:\n\n   $$A = \\begin{bmatrix} 1 & 4 & 5 \\\\  3 & 2 & 5 \\\\   2 & 1 & 3   \\end{bmatrix}$$\n\n   Perform row operations to get it to row echelon form:\n\n   - Subtract 3 times row 1 from row 2:\n     $$\\begin{bmatrix}     1 & 4 & 5 \\\\     0 & -10 & -10 \\\\     2 & 1 & 3     \\end{bmatrix}$$\n\n   - Subtract 2 times row 1 from row 3:\n     $$\\begin{bmatrix}     1 & 4 & 5 \\\\     0 & -10 & -10 \\\\     0 & -7 & -7     \\end{bmatrix}$$\n\n   - Add $\\frac{7}{10}$ times row 2 to row 3:\n     $$\\begin{bmatrix}     1 & 4 & 5 \\\\     0 & -10 & -10 \\\\     0 & 0 & 0     \\end{bmatrix}$$\n\n   The matrix is now in row echelon form.\n\n   **Rank** is the number of non-zero rows, which is 2.\n\n2. **Find the Nullity**:\n   The matrix $A$ has 3 columns. The number of free variables in the solution of $A \\mathbf{x} = \\mathbf{0}$ is $3 - \\text{Rank}$. \n\n   So,\n   $$\\text{Nullity}(A) = 3 - 2 = 1$$\n\n3. **Apply the Rank-Nullity Theorem**:\n   $$\\text{Rank}(A) + \\text{Nullity}(A) = 2 + 1 = 3$$\n\n   This matches the number of columns of $A$, confirming the theorem.\n\n### Fundamental Subspaces\n\nIn section @note-ortho, we have seen that for any matrix $A$, there is two pairs of inter-related orthogonal spaces. This leads to the concept of Fundamental sup spaces. \n\nMatrices are not just arrays of numbers; they can represent linear transformations too. A linear transformation maps vectors from one vector space to another while preserving vector addition and scalar multiplication. The matrix $A$ can be viewed as a representation of a linear transformation $T$ from $\\mathbb{R}^n$ to $\\mathbb{R}^m$ where:\n\n$$T(\\mathbf{x}) = A \\mathbf{x}$$\n\nIn this context:\n\n- The column space of $A$ represents the range of $T$, which is the set of all possible outputs.\n- The null space of $A$ represents the kernel of $T$, which is the set of vectors that are mapped to the zero vector.\n\n**The Four Fundamental Subspaces**\n\nUnderstanding the four fundamental subspaces helps in analyzing the properties of a linear transformation. These subspaces are:\n\n:::{#def-FFS}\n#### Four Fundamental Subspaces\n\nLet $T:\\mathbb{R^n}\\longrightarrow \\mathbb{R^m}$ be a linear transformation and $A$ represents the matrix of transformation. The four fundamental subspaces are defined as:\n\n1. **Column Space (Range)**: The set of all possible outputs of the transformation. For matrix $A$, this is the span of its columns. It represents the image of $\\mathbb{R}^n$ under $T$.\n\n2. **Null Space (Kernel)**: The set of all vectors that are mapped to the zero vector by the transformation. For matrix $A$, this is the solution space of $A \\mathbf{x} = \\mathbf{0}$.\n\n3. **Row Space**: The span of the rows of $A$. This space is crucial because it helps in understanding the rank of $A$. The dimension of the row space is equal to the rank of $A$, which represents the maximum number of linearly independent rows.\n\n4. **Left Null Space**: The set of all vectors $\\mathbf{y}$ such that $A^T \\mathbf{y} = \\mathbf{0}$. It provides insight into the orthogonal complement of the row space.\n:::\n\n\n\n\n\n\n\n\n```{mermaid}\ngraph TD\n    MatrixA[Matrix A] -->|Contains Columns| ColumnSpace[Column Space]\n    MatrixA -->|Contains Rows| RowSpace[Row Space]\n    MatrixA -->|Contains Vectors Mapping to Zero| NullSpace[Null Space]\n    MatrixA -->|Contains Vectors Orthogonal to Row Space| LeftNullSpace[Left Null Space]\n    ColumnSpace -->|Orthogonal Complement| NullSpace\n    RowSpace -->|Orthogonal Complement| LeftNullSpace\n```\n\n\n\n\n\n\n\nThis idea is depicted as a 'Big picture of the four sub spaces of a matrix' in the Strang's text book on Linear algebra for every one [@strang2020linear]. This 'Big Picture' is shown in [Fig- @fig-big-pic].\n\n![The Big Pictue of Fundamental Subspaces](https://i.pinimg.com/originals/fb/c5/f9/fbc5f91d82681dd7341dda6915d11e92.png){#fig-big-pic fig-align=\"center\" width=80% .lightbox}\n\nA video session from Strang's session is here:\n\n\n\n\n\n\n\n\n{{< video https://youtu.be/rwLOfdfc4dw?si=DsJb8KJTF05hHc76 >}}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#### Practice Problems\n\n**Problem 1:** Express the vector $(1,-2,5)$ as a linear combination of the vectors $(1,1,1)$, $(1,2,3)$ and $(2,-1,1)$.\n\n**Problem 2:** Show that the feature vector $(2,-5,3)$ is not linearly associated with the features $(1,-3,2)$, $(2,-4,-1)$ and $(1,-5,7)$.\n\n**Problem 3:** Show that the feature vectors $(1,1,1)$, $(1,2,3)$ and $(2,-1,1)$ are non-redundant.\n\n**Problem 4:** Prove that the features $(1,-1,1)$, $(0,1,2)$ and $(3,0,-1)$ form basis for the feature space.\n\n**Problem 5:** Check whether the vectors $(1,2,1)$, $(2,1,4)$ and $(4,5,6)$ form a basis for $\\mathbb{R}^3$.\n\n**Problem 6:** Find the four fundamental subspaces of the feature space created by $(1,2,1)$, $(2,1,4)$ and $(4,5,6)$.\n\n**Problem 7:** Find the four fundamental subspaces and its dimensions of the matrix $\\begin{bmatrix}1&2&4\\\\2&1&5\\\\1&4&6\\end{bmatrix}$.\n\n**Problem 8:** Express $A=\\begin{bmatrix}1&2&-1\\\\3&1&-1\\\\2&-1&0\\end{bmatrix}$ as the Kronecker product of the column space and the row space in the form $A=C\\otimes R$.\n\n**Problem 9:** Find the four fundamental subspaces of $A=\\begin{bmatrix} 1&2&0&2&5\\\\-2&-5&1&-1&-8\\\\0&-3&3&4&1\\\\3&6&0&-7&2\\end{bmatrix}$.\n\n**Problem 10:** Find the four fundamental subspaces of $A=\\begin{bmatrix}-1&2&-1&5&6\\\\4&-4&-4&-12&-8\\\\2&0&-6&-2&4\\\\-3&1&7&-2&12\\end{bmatrix}$.\n\n**Problem 11:** Express $A=\\begin{bmatrix}2&3&-1&-1\\\\1&-1&-2&-4\\\\3&1&3&-2\\\\6&3&0&-7\\end{bmatrix}$ in $A=C\\otimes R$, where $C$ is the column space and $R$ is the row space of $A$.\n\n**Problem 12:** Express $A=\\begin{bmatrix}0&1&-3&-1\\\\1&0&1&1\\\\3&1&0&2\\\\1&1&-2&0\\end{bmatrix}$ in $A=C\\otimes R$, where $C$ is the column space and $R$ is the row space of $A$.\n\n**Problem 13:** Show that the feature vectors $(2,3,0)$, $(1,2,0)$ and $(8,13,0)$ are redundant and hence find the relationship between them.\n\n**Problem 14:** Show that the feature vectors $(1,2,1)$, $(4,1,2)$, $(-3,8,1)$ and $(6,5,4)$ are redundant and hence find the relationship between them.\n\n**Problem 15:** Show that the feature vectors $(1,2,-1,0)$, $(1,3,1,2)$, $(4,2,1,0)$ and $(6,1,0,1)$ are redundant and hence find the relationship between them.\n\n:::{.callout-important}\n**Three Parts of the *Fundamental theorem***\nThe fundamental theorem of linear algebra relates all four of the fundamental subspaces in a number of different ways. There are main parts to the theorem:\n\n**Part 1:(Rank nullity theorem)** The column and row spaces of an $m\\times n$ matrix $A$ both have dimension $r$, the rank of the matrix. The nullspace has dimension $n−r$, and the left nullspace has dimension $m−r$.\n\n**Part 2:(Orthogonal subspaces)** The nullspace and row space are orthogonal. The left nullspace and the column space are also orthogonal.\n\n**Part 3:(Matrix decomposition)** The final part of the fundamental theorem of linear algebra constructs an orthonormal basis, and demonstrates a singular value decomposition: any matrix $M$ can be written in the form $M=U\\Sigma V^T$ , where $U_{m\\times m}$ and $V_{n\\times n}$ are unitary matrices, $\\Sigma_{m\\times n}$ matrix with nonnegative values on the diagonal.\n\nThis part of the fundamental theorem allows one to immediately find a basis of the subspace in question.\nThis can be summarized in the following table.\n\n| Subspace               | Subspace of   | Symbol                | Dimension | Basis                                      |\n|:-----------------------:|:-------------:|:----------------------:|:----------:|:------------------------------------------:|\n| Column space           | $\\mathbb{R}^m$ | $\\operatorname{im}(A)$ | $r$        | First $r$ columns of $U$                   |\n| Nullspace (kernel)     | $\\mathbb{R}^n$ | $\\ker(A)$             | $n - r$    | Last $n - r$ columns of $V$                |\n| Row space              | $\\mathbb{R}^n$ | $\\operatorname{im}(A^T)$ | $r$        | First $r$ columns of $V$                   |\n| Left nullspace (kernel)| $\\mathbb{R}^m$ | $\\ker(A^T)$           | $m - r$    | Last $m - r$ columns of $U$                |\n\n:::\n\n#### Computational methods to find all the four fundamental subspaces of a matrix\n\nThere are different approaches to find the four fundamental subspaces of a matrix using `Python`. Simplest method is just convert our mathematical procedure into `Python` functions and call them to find respective spaces. This method is illustrated below.\n\n::: {#b76d4094 .cell execution_count=33}\n``` {.python .cell-code}\n# importing numpy library for numerical computation\nimport numpy as np\n# define the function create the row-reduced Echelon form of given matrix\ndef row_echelon_form(A):\n    \"\"\"Convert matrix A to its row echelon form.\"\"\"\n    A = A.astype(float)\n    rows, cols = A.shape\n    for i in range(min(rows, cols)):\n        # Pivot: find the maximum element in the current column\n        max_row = np.argmax(np.abs(A[i:, i])) + i\n        if A[max_row, i] == 0:\n            continue  # Skip if the column is zero\n        # Swap the current row with the max_row\n        A[[i, max_row]] = A[[max_row, i]]\n        # Eliminate entries below the pivot\n        for j in range(i + 1, rows):\n            factor = A[j, i] / A[i, i]\n            A[j, i:] -= factor * A[i, i:]\n    return A\n\n# define function to generate null space from the row-reduced echelon form\ndef null_space_of_matrix(A, rtol=1e-5):\n    \"\"\"Compute the null space of a matrix A using row reduction.\"\"\"\n    A_reduced = row_echelon_form(A)\n    rows, cols = A_reduced.shape\n    # Identify pivot columns\n    pivots = []\n    for i in range(rows):\n        for j in range(cols):\n            if np.abs(A_reduced[i, j]) > rtol:\n                pivots.append(j)\n                break\n    free_vars = set(range(cols)) - set(pivots)\n    \n    null_space = []\n    for free_var in free_vars:\n        null_vector = np.zeros(cols)\n        null_vector[free_var] = 1\n        for pivot, row in zip(pivots, A_reduced[:len(pivots)]):\n            null_vector[pivot] = -row[free_var]\n        null_space.append(null_vector)\n    \n    return np.array(null_space).T\n\n# define the function to generate the row-space of A\n\ndef row_space_of_matrix(A):\n    \"\"\"Compute the row space of a matrix A using row reduction.\"\"\"\n    A_reduced = row_echelon_form(A)\n    # The non-zero rows of the reduced matrix form the row space\n    non_zero_rows = A_reduced[~np.all(A_reduced == 0, axis=1)]\n    return non_zero_rows\n\n# define the function to generate the column space of A\n\ndef column_space_of_matrix(A):\n    \"\"\"Compute the column space of a matrix A using row reduction.\"\"\"\n    A_reduced = row_echelon_form(A)\n    rows, cols = A_reduced.shape\n    # Identify pivot columns\n    pivots = []\n    for i in range(rows):\n        for j in range(cols):\n            if np.abs(A_reduced[i, j]) > 1e-5:\n                pivots.append(j)\n                break\n    column_space = A[:, pivots]\n    return column_space\n```\n:::\n\n\n#### Examples:\n\n1. Find all the fundamental subspaces of $A=\\begin{pmatrix}1&2&3\\\\ 4&5&6\\\\7&8&9\\end{pmatrix}$.\n\n::: {#83fbb2dc .cell execution_count=34}\n``` {.python .cell-code}\nA = np.array([[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]])\n\nprint(\"Matrix A:\")\nprint(A)\n\n# Null Space\nnull_space_A = null_space_of_matrix(A)\nprint(\"\\nNull Space of A:\")\nprint(null_space_A)\n\n# Row Space\nrow_space_A = row_space_of_matrix(A)\nprint(\"\\nRow Space of A:\")\nprint(row_space_A)\n\n# Column Space\ncolumn_space_A = column_space_of_matrix(A)\nprint(\"\\nColumn Space of A:\")\nprint(column_space_A)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMatrix A:\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n\nNull Space of A:\n[[-9.        ]\n [-1.71428571]\n [ 1.        ]]\n\nRow Space of A:\n[[7.00000000e+00 8.00000000e+00 9.00000000e+00]\n [0.00000000e+00 8.57142857e-01 1.71428571e+00]\n [0.00000000e+00 5.55111512e-17 1.11022302e-16]]\n\nColumn Space of A:\n[[1 2]\n [4 5]\n [7 8]]\n```\n:::\n:::\n\n\n#### Rank and Solution of System of Linear Equations\n\nIn linear algebra, the rank of a matrix is a crucial concept for understanding the structure of a system of linear equations. It provides insight into the solutions of these systems, helping us determine the number of independent equations and the nature of the solution space.\n\n:::{#def-soln}\n\n#### Rank and System Consistency\n\nThe rank of a matrix $A$ is defined as the maximum number of linearly independent rows or columns. When solving a system of linear equations represented by $A\\mathbf{x} = \\mathbf{b}$, where $A$ is an $m \\times n$ matrix and $\\mathbf{b}$ is a vector, the rank of $A$ plays a crucial role in determining the solution's existence and uniqueness.\n\n**Consistency of the System**\n\n1. **Consistent System:** A system of linear equations is consistent if there exists at least one solution. This occurs if the rank of the coefficient matrix $A$ is equal to the rank of the augmented matrix $[A|\\mathbf{b}]$. Mathematically, this can be expressed as:\n   $$\\text{rank}(A) = \\text{rank}([A|\\mathbf{b}])$$\n   If this condition is met, the system has solutions. The solutions can be:\n   - **Unique** if the rank equals the number of variables.\n   - **Infinitely many** if the rank is less than the number of variables.\n\n2. **Inconsistent System:** A system is inconsistent if there are no solutions. This occurs when:\n   $$\\text{rank}(A) \\ne \\text{rank}([A|\\mathbf{b}])$$\n   In this case, the equations represent parallel or conflicting constraints that cannot be satisfied simultaneously.\n:::\n\n:::{.callout-note}\n\n### Use of Null space in creation of general solution from particular solution\n\nIf the system $AX=b$ has many solutions, then the general solution of the system can be found using a particular solution and the elements in the null space of the coefficient matrix $A$ as\n\n$$X=x_p+tX_N$$\n\nwhere $X$ is the general solution and $t$ is a free variable (parameter) and $X_N\\in N(A)$.\n\n:::\n\n#### Computational method to solve system of linear equations.\n\nIf for a system $AX=b$, $det(A)\\neq 0$, then the system has a unique solution and can be found by `solve()` function from `NumPy`. If the system is consistant and many solutions, then computationally we will generate the general solution using the $N(A)$. A detailed `Python` code is given below.\n\n::: {#4fb3ab67 .cell execution_count=35}\n``` {.python .cell-code}\nimport numpy as np\n\ndef check_consistency(A, b):\n    \"\"\"\n    Check the consistency of a linear system Ax = b and return the solution if consistent.\n    \n    Parameters:\n    A (numpy.ndarray): Coefficient matrix.\n    b (numpy.ndarray): Right-hand side vector.\n    \n    Returns:\n    tuple: A tuple with consistency status, particular solution (if consistent), and null space (if infinite solutions).\n    \"\"\"\n    A = np.array(A)\n    b = np.array(b)\n    \n    # Augment the matrix A with vector b\n    augmented_matrix = np.column_stack((A, b))\n    \n    # Compute ranks\n    rank_A = np.linalg.matrix_rank(A)\n    rank_augmented = np.linalg.matrix_rank(augmented_matrix)\n    \n    # Check for consistency\n    if rank_A == rank_augmented:\n        if rank_A == A.shape[1]:\n            # Unique solution\n            solution = np.linalg.solve(A, b)\n            return \"Consistent and has a unique solution\", solution, None\n        else:\n            # Infinitely many solutions\n            particular_solution = np.linalg.lstsq(A, b, rcond=None)[0]\n            null_space = null_space_of_matrix(A)\n            return \"Consistent but has infinitely many solutions\", particular_solution, null_space\n    else:\n        return \"Inconsistent system (no solution)\", None, None\n\ndef null_space_of_matrix(A):\n    \"\"\"\n    Compute the null space of matrix A, which gives the set of solutions to Ax = 0.\n    \n    Parameters:\n    A (numpy.ndarray): Coefficient matrix.\n    \n    Returns:\n    numpy.ndarray: Basis for the null space of A.\n    \"\"\"\n    u, s, vh = np.linalg.svd(A)\n    null_mask = (s <= 1e-10)  # Singular values near zero\n    null_space = np.compress(null_mask, vh, axis=0)\n    return null_space.T\n```\n:::\n\n\n>*Example 1:* Solve \\begin{align*}2x-y+z&=1\\\\ x+2y&=3\\\\ 3x+2y+z&=4\\end{align*}\n\n::: {#44cedcb4 .cell execution_count=36}\n``` {.python .cell-code}\n# Example usage 1: System with a unique solution\nA1 = np.array([[2, -1, 1], [1, 0, 2], [3, 2, 1]])\nb1 = np.array([1, 3, 4])\n\nstatus1, solution1, null_space1 = check_consistency(A1, b1)\nprint(\"Example 1 - Status:\", status1)\n\nif solution1 is not None:\n    print(\"Solution:\", solution1)\nif null_space1 is not None:\n    print(\"Null Space:\", null_space1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nExample 1 - Status: Consistent and has a unique solution\nSolution: [0.27272727 0.90909091 1.36363636]\n```\n:::\n:::\n\n\n>*Example 2:* Solve the system of equations, \\begin{align*}x+2y+z&=3\\\\ 2x+4y+2z&=6\\\\ x+y+z&=2\\end{align*}\n\n::: {#9538f61b .cell execution_count=37}\n``` {.python .cell-code}\n# Example usage 2: System with infinitely many solutions\nA2 = np.array([[1, 2, 1], [2, 4, 2], [1, 1, 1]])\nb2 = np.array([3, 6, 2])\n\nstatus2, solution2, null_space2 = check_consistency(A2, b2)\nprint(\"\\nExample 2 - Status:\", status2)\n\nif solution2 is not None:\n    print(\"Particular Solution:\", solution2)\nif null_space2 is not None:\n    print(\"Null Space (Basis for infinite solutions):\", null_space2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nExample 2 - Status: Consistent but has infinitely many solutions\nParticular Solution: [0.5 1.  0.5]\nNull Space (Basis for infinite solutions): [[ 7.07106781e-01]\n [ 1.11022302e-16]\n [-7.07106781e-01]]\n```\n:::\n:::\n\n\n:::{.callout-note}\n\n### Connection between fundamental subspaces and Singular Value Decomposition\n\nEvery non zero matrix can be expressed as a decomposition known as the SVD as follows:\n\n\\begin{align}\n  \\mathbf{A} &=\n  \\mathbf{U} \\, \\Sigma \\, \\mathbf{V}^{*} \\\\\n%\n &=\n% U \n  \\left[ \\begin{array}{cc}\n     \\color{blue}{\\mathbf{U}_{\\mathcal{R}}} & \\color{red}{\\mathbf{U}_{\\mathcal{N}}}\n  \\end{array} \\right]  \n% Sigma\n  \\left[ \\begin{array}{cccc|cc}\n     \\sigma_{1} & 0 & \\dots &  &   & \\dots &  0 \\\\\n     0 & \\sigma_{2}  \\\\\n     \\vdots && \\ddots \\\\\n       & & & \\sigma_{\\rho} \\\\\\hline\n       & & & & 0 & \\\\\n     \\vdots &&&&&\\ddots \\\\\n     0 & & &   &   &  & 0 \\\\\n  \\end{array} \\right]\n% V \n  \\left[ \\begin{array}{c}\n     \\color{blue}{\\mathbf{V}_{\\mathcal{R}}}^{*} \\\\ \n     \\color{red}{\\mathbf{V}_{\\mathcal{N}}}^{*}\n  \\end{array} \\right]  \\\\\n%\n  & =\n% U\n   \\left[ \\begin{array}{cccccccc}\n    \\color{blue}{u_{1}} & \\dots & \\color{blue}{u_{\\rho}} & \\color{red}{u_{\\rho+1}} & \\dots & \\color{red}{u_{m}}\n  \\end{array} \\right]\n% Sigma\n  \\left[ \\begin{array}{cc}\n     \\mathbf{S}_{\\rho\\times \\rho} & \\mathbf{0} \\\\\n     \\mathbf{0} & \\mathbf{0} \n  \\end{array} \\right]\n% V\n   \\left[ \\begin{array}{c}\n    \\color{blue}{v_{1}^{*}} \\\\ \n    \\vdots \\\\\n    \\color{blue}{v_{\\rho}^{*}} \\\\\n    \\color{red}{v_{\\rho+1}^{*}} \\\\\n    \\vdots \\\\ \n    \\color{red}{v_{n}^{*}}\n  \\end{array} \\right]\n%\n\\end{align}\n\nThe column vectors form spans for the subspaces:\n\n\\begin{align} \n% R A\n\\color{blue}{\\mathcal{R} \\left( \\mathbf{A} \\right)} &=\n\\text{span} \\left\\{\n \\color{blue}{u_{1}}, \\dots , \\color{blue}{u_{\\rho}}\n\\right\\} \\\\\n% R A*\n\\color{blue}{\\mathcal{R} \\left( \\mathbf{A}^{*} \\right)} &=\n\\text{span} \\left\\{\n \\color{blue}{v_{1}}, \\dots , \\color{blue}{v_{\\rho}}\n\\right\\} \\\\\n% N A*\n\\color{red}{\\mathcal{N} \\left( \\mathbf{A}^{*} \\right)} &=\n\\text{span} \\left\\{\n\\color{red}{u_{\\rho+1}}, \\dots , \\color{red}{u_{m}}\n\\right\\} \\\\\n% N A\n\\color{red}{\\mathcal{N} \\left( \\mathbf{A} \\right)} &=\n\\text{span} \\left\\{\n\\color{red}{v_{\\rho+1}}, \\dots , \\color{red}{v_{n}}\n\\right\\} \\\\\n%\n\\end{align}\n\nThe conclusion is that the full SVD provides an orthonormal span for not only the two null spaces, but also both range spaces.\n:::\n\n",
    "supporting": [
      "module_2_files\\figure-epub"
    ],
    "filters": [],
    "engineDependencies": {
      "jupyter": [
        {
          "jsWidgets": false,
          "jupyterWidgets": false,
          "htmlLibraries": []
        }
      ]
    }
  }
}