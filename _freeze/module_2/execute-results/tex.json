{
  "hash": "c69c4008e6086dba3960619081e4fa21",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Transforming Linear Algebra to Computational Language\"\nexecute: \n  enabled: true\n---\n\n## Introduction \n\nIn the first module, we established a solid foundation in matrix algebra by exploring pseudocode and implementing fundamental matrix operations using Python. We practiced key concepts such as matrix addition, subtraction, multiplication, and determinants through practical examples in image processing, leveraging the `SymPy` library for symbolic computation. \n\nAs we begin the second module, **\"Transforming Linear Algebra to Computational Language,\"** our focus will shift towards applying these concepts with greater depth and actionable insight. This module is designed to bridge the theoretical knowledge from matrix algebra with practical computational applications. You will learn to interpret and utilize matrix operations, solve systems of equations, and analyze the rank of matrices within a variety of real-world contexts. \n\nA new concept we will introduce is the **Rank-Nullity Theorem**, which provides a fundamental relationship between the rank of a matrix and the dimensions of its null space. This theorem is crucial for understanding the solution spaces of linear systems and the properties of linear transformations. By applying this theorem, you will be able to gain deeper insights into the structure of solutions and the behavior of matrix transformations.\n\nThis transition will not only reinforce your understanding of linear algebra but also enhance your ability to apply these concepts effectively in computational settings. Through engaging examples and practical exercises, you will gain valuable experience in transforming abstract mathematical principles into tangible solutions, setting a strong groundwork for advanced computational techniques.\n\n## Relearning of Terms and Operations in Linear Algebra\n\nIn this section, we will revisit fundamental matrix operations such as addition, subtraction, scaling, and more through practical examples. Our goal is to transform theoretical linear algebra into modern computational applications. We will demonstrate these concepts using Python, focusing on practical and industrial applications.\n\n### Matrix Addition and Subtraction in Data Analysis\n\nMatrix addition and subtraction are fundamental operations that help in combining datasets and analyzing differences. \n\n**Simple Example: Combining Quarterly Sales Data**\n\nWe begin with quarterly sales data from different regions and combine them to get the total sales.\n\n**Tabular Data:**\n\n| Region | Q1   | Q2   | Q3   | Q4   |\n|--------|------|------|------|------|\n| A      | 2500 | 2800 | 3100 | 2900 |\n| B      | 1500 | 1600 | 1700 | 1800 |\n\n**From Scratch Python Implementation:**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Quarterly sales data\nsales_region_a = np.array([2500, 2800, 3100, 2900])\nsales_region_b = np.array([1500, 1600, 1700, 1800])\n\n# Combine sales data\ntotal_sales = sales_region_a + sales_region_b\n\n# Visualization\nquarters = ['Q1', 'Q2', 'Q3', 'Q4']\nplt.bar(quarters, total_sales, color='skyblue')\nplt.xlabel('Quarter')\nplt.ylabel('Total Sales')\nplt.title('Combined Quarterly Sales Data for Regions A and B')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-2-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nUsing `pandas` to handle tabular data:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# DataFrames for quarterly sales data\ndf_a = pd.DataFrame({'Q1': [2500], 'Q2': [2800], 'Q3': [3100], 'Q4': [2900]}, index=['Region A'])\ndf_b = pd.DataFrame({'Q1': [1500], 'Q2': [1600], 'Q3': [1700], 'Q4': [1800]}, index=['Region B'])\n\n# Combine data\ndf_total = df_a.add(df_b)\n\n# Visualization\ndf_total.T.plot(kind='bar', color='skyblue')\nplt.xlabel('Quarter')\nplt.ylabel('Total Sales')\nplt.title('Combined Quarterly Sales Data for Regions A and B')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-3-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can extend the this in to more advanced examples. Irrespective to the size of the data, for representation aggregation tasks matrix models are best options and are used in industry as a standard. Let us consider an advanced example to analyse difference in stock prices. For this example we are using a simulated data. The python code for this simulation process is shown below: \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Simulated observed and predicted stock prices\nobserved_prices = np.random.uniform(100, 200, size=(100, 5))\npredicted_prices = np.random.uniform(95, 210, size=(100, 5))\n\n# Calculate the difference matrix\nprice_differences = observed_prices - predicted_prices\n\n# Visualization\nplt.imshow(price_differences, cmap='coolwarm', aspect='auto')\nplt.colorbar()\nplt.title('Stock Price Differences')\nplt.xlabel('Stock Index')\nplt.ylabel('Day Index')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-4-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nAnother important matrix operation relevant to data analytics and Machine Learning application is scaling. This is considered as a statistical tool to make various features (attributes) in to same scale so as to avoid unnecessary misleading impact in data analysis and its intepretation. In Machine Learning context, this pre-processing stage is inevitable so as to make the model relevant and usable. \n\n**Simple Example: Normalizing Employee Performance Data**\n\n**Tabular Data:**\n\n| Employee | Metric A   | Metric B   | \n|--------|--------------|------------|\n| X      | 80           | 700        | \n| Y      | 90           | 800        | \n| Z      |100           |900         |\n| A      |110           |1000        |\n| B      |120           |1100        |\n\nUsing simple python code we can simulate the model for `min-max` scaling.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Employee performance data with varying scales\ndata = np.array([[80, 700], [90, 800], [100, 900], [110, 1000], [120, 1100]])\n\n# Manual scaling\nmin_vals = np.min(data, axis=0)\nmax_vals = np.max(data, axis=0)\nscaled_data = (data - min_vals) / (max_vals - min_vals)\n\n# Visualization\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(data, cmap='viridis')\nplt.title('Original Data')\nplt.colorbar()\n\nplt.subplot(1, 2, 2)\nplt.imshow(scaled_data, cmap='viridis')\nplt.title('Scaled Data')\nplt.colorbar()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-5-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n This method will confine the feature values (attributes) into the range $[0,1]$. So in effect all the features are scaled proportionally to the data spectrum.\n\nSimilarly we can use the standard scaling (transformation to normal distribution) using the transformation $\\dfrac{x-\\bar{x}}{n}$. The python code for this operation is given below:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Standard scaling from scratch\ndef standard_scaling(data):\n    mean = np.mean(data, axis=0)\n    std = np.std(data, axis=0)\n    scaled_data = (data - mean) / std\n    return scaled_data\n\n# Apply standard scaling\nscaled_data_scratch = standard_scaling(data)\n\nprint(\"Standard Scaled Data (from scratch):\\n\", scaled_data_scratch)\n\n# Visualization\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(data, cmap='viridis')\nplt.title('Original Data')\nplt.colorbar()\n\nplt.subplot(1, 2, 2)\nplt.imshow(scaled_data_scratch, cmap='viridis')\nplt.title('Scaled Data')\nplt.colorbar()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStandard Scaled Data (from scratch):\n [[-1.41421356 -1.41421356]\n [-0.70710678 -0.70710678]\n [ 0.          0.        ]\n [ 0.70710678  0.70710678]\n [ 1.41421356  1.41421356]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-6-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nHere we will use one more type of visualization to demonstrate the distribution of data.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport seaborn as sns\n# Create plots\nplt.figure(figsize=(14, 7))\n\n# Plot for original data\nplt.subplot(1, 2, 1)\nsns.histplot(data, kde=True, bins=10, palette=\"viridis\")\nplt.title('Original Data Distribution')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\n# Plot for standard scaled data\nplt.subplot(1, 2, 2)\nsns.histplot(scaled_data_scratch, kde=True, bins=10, palette=\"viridis\")\nplt.title('Standard Scaled Data Distribution')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nA scatter plot showing the impact of scaling is shown below.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Plot original and scaled data\nplt.figure(figsize=(14, 7))\n\n# Original Data\nplt.subplot(1, 3, 1)\nplt.scatter(data[:, 0], data[:, 1], color='blue')\nplt.title('Original Data')\nplt.xlabel('Metric A')\nplt.ylabel('Metric B')\n\n# Standard Scaled Data\nplt.subplot(1, 3, 2)\nplt.scatter(scaled_data_scratch[:, 0], scaled_data_scratch[:, 1], color='green')\nplt.title('Standard Scaled Data')\nplt.xlabel('Metric A (Standard Scaled)')\nplt.ylabel('Metric B (Standard Scaled)')\n\n# Min-Max Scaled Data\nplt.subplot(1, 3, 3)\nplt.scatter(scaled_data[:, 0], scaled_data[:, 1], color='red')\nplt.title('Min-Max Scaled Data')\nplt.xlabel('Metric A (Min-Max Scaled)')\nplt.ylabel('Metric B (Min-Max Scaled)')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-8-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nWe can use the `scikit-learn` library for do the same thing in a very simple handy approach. The `python` code for this job is shown below.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Min-max scaling using sklearn\nscaler = MinMaxScaler()\nmin_max_scaled_data_sklearn = scaler.fit_transform(data)\n\nprint(\"Min-Max Scaled Data (using sklearn):\\n\", min_max_scaled_data_sklearn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMin-Max Scaled Data (using sklearn):\n [[0.   0.  ]\n [0.25 0.25]\n [0.5  0.5 ]\n [0.75 0.75]\n [1.   1.  ]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler\n\n# Standard scaling using sklearn\nscaler = StandardScaler()\nscaled_data_sklearn = scaler.fit_transform(data)\n\nprint(\"Standard Scaled Data (using sklearn):\\n\", scaled_data_sklearn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStandard Scaled Data (using sklearn):\n [[-1.41421356 -1.41421356]\n [-0.70710678 -0.70710678]\n [ 0.          0.        ]\n [ 0.70710678  0.70710678]\n [ 1.41421356  1.41421356]]\n```\n:::\n:::\n\n\nA scatter plot showing the impact on scaling is shown bellow.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Plot original and scaled data\nplt.figure(figsize=(14, 7))\n\n# Original Data\nplt.subplot(1, 3, 1)\nplt.scatter(data[:, 0], data[:, 1], color='blue')\nplt.title('Original Data')\nplt.xlabel('Metric A')\nplt.ylabel('Metric B')\n\n# Standard Scaled Data\nplt.subplot(1, 3, 2)\nplt.scatter(scaled_data_sklearn[:, 0], scaled_data_sklearn[:, 1], color='green')\nplt.title('Standard Scaled Data')\nplt.xlabel('Metric A (Standard Scaled)')\nplt.ylabel('Metric B (Standard Scaled)')\n\n# Min-Max Scaled Data\nplt.subplot(1, 3, 3)\nplt.scatter(min_max_scaled_data_sklearn[:, 0], min_max_scaled_data_sklearn[:, 1], color='red')\nplt.title('Min-Max Scaled Data')\nplt.xlabel('Metric A (Min-Max Scaled)')\nplt.ylabel('Metric B (Min-Max Scaled)')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-11-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n### More on Matrix Product and its Applications\n\nIn the first module of our course, we introduced matrix products as scalar projections, focusing on how matrices interact through basic operations. In this section, we will expand on this by exploring different types of matrix products that have practical importance in various fields. One such product is the *Hadamard product*, which is particularly useful in applications ranging from image processing to neural networks and statistical analysis. We will cover the definition, properties, and examples of the Hadamard product, and then delve into practical applications with simulated data.\n\n#### Hadamard Product\n\nThe Hadamard product (or element-wise product) of two matrices is a binary operation that combines two matrices of the same dimensions to produce another matrix of the same dimensions, where each element is the product of corresponding elements in the original matrices.\n\n:::{.callout-important}\n### Definition (Hadamard Product):\nFor two matrices $A$ and $B$ of the same dimension $m \\times n$, the Hadamard product $A \\circ B$ is defined as:\n\n$$(A \\circ B)_{ij} = A_{ij} \\cdot B_{ij}$$\n\nwhere $\\cdot$ denotes element-wise multiplication.\n:::\n\n::: {.callout-note}\n### Properties of Hadamard Product\n\n1.  **Commutativity**: \n  $$A \\circ B = B \\circ A$$\n  \n2.  **Associativity**: \n  $$(A \\circ B) \\circ C = A \\circ (B \\circ C)$$\n  \n3.  **Distributivity**: \n  $$A \\circ (B + C) = (A \\circ B) + (A \\circ C)$$\n:::\n\nSome simple examples to demonstrate the Hadamard product is given below.\n\nExample 1: Basic Hadamard Product\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}\n1 & 2 \\\\\n3 & 4\n\\end{pmatrix}, \\quad\nB = \\begin{pmatrix}\n5 & 6 \\\\\n7 & 8\n\\end{pmatrix}$$\n\nThe Hadamard product $A \\circ B$ is:\n$$A \\circ B = \\begin{pmatrix}\n1 \\cdot 5 & 2 \\cdot 6 \\\\\n3 \\cdot 7 & 4 \\cdot 8\n\\end{pmatrix} = \\begin{pmatrix}\n5 & 12 \\\\\n21 & 32\n\\end{pmatrix}$$\n\nExample 2: Hadamard Product with Larger Matrices\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{pmatrix}, \\quad\nB = \\begin{pmatrix}\n9 & 8 & 7 \\\\\n6 & 5 & 4 \\\\\n3 & 2 & 1\n\\end{pmatrix}$$\n\nThe Hadamard product $A \\circ B$ is:\n\n$$A \\circ B = \\begin{pmatrix}\n1 \\cdot 9 & 2 \\cdot 8 & 3 \\cdot 7 \\\\\n4 \\cdot 6 & 5 \\cdot 5 & 6 \\cdot 4 \\\\\n7 \\cdot 3 & 8 \\cdot 2 & 9 \\cdot 1\n\\end{pmatrix} = \\begin{pmatrix}\n9 & 16 & 21 \\\\\n24 & 25 & 24 \\\\\n21 & 16 & 9\n\\end{pmatrix}$$\n\nIn the following code chunks the computational process of Hadamard product is implemented in `Python`. Here both the from the scratch and use of external module versions are included.\n\n**1. Compute Hadamard Product from Scratch (without Libraries)**\n\nHere’s how you can compute the Hadamard product manually:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Define matrices A and B\nA = [[1, 2, 3], [4, 5, 6]]\nB = [[7, 8, 9], [10, 11, 12]]\n\n# Function to compute Hadamard product\ndef hadamard_product(A, B):\n    # Get the number of rows and columns\n    num_rows = len(A)\n    num_cols = len(A[0])\n    \n    # Initialize the result matrix\n    result = [[0]*num_cols for _ in range(num_rows)]\n    \n    # Compute the Hadamard product\n    for i in range(num_rows):\n        for j in range(num_cols):\n            result[i][j] = A[i][j] * B[i][j]\n    \n    return result\n\n# Compute Hadamard product\nhadamard_product_result = hadamard_product(A, B)\n\n# Display result\nprint(\"Hadamard Product (From Scratch):\")\nfor row in hadamard_product_result:\n    print(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHadamard Product (From Scratch):\n[7, 16, 27]\n[40, 55, 72]\n```\n:::\n:::\n\n\n**2. Compute Hadamard Product Using `SymPy`**\n\nHere’s how to compute the Hadamard product using `SymPy`:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define matrices A and B\nA = sp.Matrix([[1, 2, 3], [4, 5, 6]])\nB = sp.Matrix([[7, 8, 9], [10, 11, 12]])\n\n# Compute Hadamard product using SymPy\nHadamard_product_sympy = A.multiply_elementwise(B)\n\n# Display result\nprint(\"Hadamard Product (Using SymPy):\")\nprint(Hadamard_product_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHadamard Product (Using SymPy):\nMatrix([[7, 16, 27], [40, 55, 72]])\n```\n:::\n:::\n\n\n**Practical Applications**\n\n*Application 1: Image Masking*\n\nThe Hadamard product can be used for image masking. Here’s how you can apply a mask to an image and visualize it:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Simulated large image (2D array) using NumPy\nimage = np.random.rand(100, 100)\n\n# Simulated mask (binary matrix) using NumPy\nmask = np.random.randint(0, 2, size=(100, 100))\n\n# Compute Hadamard product\nmasked_image = image * mask\n\n# Plot original image and masked image\nfig, ax = plt.subplots(1, 2, figsize=(12, 5))\nax[0].imshow(image, cmap='gray')\nax[0].set_title('Original Image')\nax[1].imshow(masked_image, cmap='gray')\nax[1].set_title('Masked Image')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-14-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nApplication 2: Element-wise Scaling in Neural Networks\n\nThe Hadamard product can be used for dropout^[A regularization techniques in Deep learning. This approach deactivate some selected neurons to control model over-fitting] in neural networks. A simple simulated example is given below.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Simulated large activations (2D array) using NumPy\nactivations = np.random.rand(100, 100)\n\n# Simulated dropout mask (binary matrix) using NumPy\ndropout_mask = np.random.randint(0, 2, size=(100, 100))\n\n# Apply dropout\ndropped_activations = activations * dropout_mask\n\n# Display results\nprint(\"Original Activations:\")\nprint(activations)\nprint(\"\\nDropout Mask:\")\nprint(dropout_mask)\nprint(\"\\nDropped Activations:\")\nprint(dropped_activations)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal Activations:\n[[0.49902364 0.44426354 0.42008409 ... 0.90556885 0.03754306 0.49457694]\n [0.43028068 0.09091258 0.3277298  ... 0.91208521 0.00538035 0.81311786]\n [0.0688875  0.86261863 0.1383685  ... 0.0206717  0.69579842 0.13953494]\n ...\n [0.30009566 0.38572257 0.57015521 ... 0.56835107 0.29719683 0.53132121]\n [0.36673097 0.12461345 0.22943043 ... 0.43053501 0.81345988 0.68504261]\n [0.26203318 0.39116377 0.84537127 ... 0.56872971 0.55224375 0.11553382]]\n\nDropout Mask:\n[[0 1 0 ... 0 0 0]\n [1 1 0 ... 0 0 0]\n [1 1 0 ... 0 0 1]\n ...\n [0 0 0 ... 0 0 0]\n [1 0 0 ... 1 1 1]\n [1 0 0 ... 0 0 1]]\n\nDropped Activations:\n[[0.         0.44426354 0.         ... 0.         0.         0.        ]\n [0.43028068 0.09091258 0.         ... 0.         0.         0.        ]\n [0.0688875  0.86261863 0.         ... 0.         0.         0.13953494]\n ...\n [0.         0.         0.         ... 0.         0.         0.        ]\n [0.36673097 0.         0.         ... 0.43053501 0.81345988 0.68504261]\n [0.26203318 0.         0.         ... 0.         0.         0.11553382]]\n```\n:::\n:::\n\n\nApplication 3: Statistical Data Analysis\n\nIn statistics, the Hadamard product can be applied to scale covariance matrices. Here’s how we can compute the covariance matrix using matrix operations and apply scaling.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nimport sympy as sp\nimport numpy as np\n\n# Simulated large dataset (2D array) using NumPy\ndata = np.random.rand(100, 10)\n\n# Compute the mean of each column\nmean = np.mean(data, axis=0)\n\n# Center the data\ncentered_data = data - mean\n\n# Compute the covariance matrix using matrix product operation\ncov_matrix = (centered_data.T @ centered_data) / (centered_data.shape[0] - 1)\ncov_matrix_sympy = sp.Matrix(cov_matrix)\n\n# Simulated scaling factors (2D array) using SymPy Matrix\nscaling_factors = sp.Matrix(np.random.rand(10, 10))\n\n# Compute Hadamard product\nscaled_cov_matrix = cov_matrix_sympy.multiply(scaling_factors)\n\n# Display results\nprint(\"Covariance Matrix:\")\nprint(cov_matrix_sympy)\nprint(\"\\nScaling Factors:\")\nprint(scaling_factors)\nprint(\"\\nScaled Covariance Matrix:\")\nprint(scaled_cov_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCovariance Matrix:\nMatrix([[0.0716188590491855, 0.00515830614072920, -0.00854892329074840, -0.00572786303016421, 0.00312297790688515, 0.00877653734019333, 0.00599850215358749, -0.00348995913138712, 0.00246547676245725, 0.00666124765608796], [0.00515830614072920, 0.0924024268373734, 0.0160305524637617, 0.00415921931633865, -0.0136545305999686, -0.00211069642574397, -0.0190376942032620, -0.00257010773135636, 0.00231670739802999, -0.00692762180581513], [-0.00854892329074840, 0.0160305524637617, 0.0835281958753898, -0.00159385871313900, 0.00313938633449207, -0.00631727519269487, -0.000857192315515151, -0.00675389095428766, 0.00233120058289521, 0.00603338006388508], [-0.00572786303016421, 0.00415921931633865, -0.00159385871313900, 0.0798356880024512, 0.000668609766731491, -0.00734367229783357, -0.00379864597533914, -0.0119801680980932, 0.00212337629490726, -0.00175377705994861], [0.00312297790688515, -0.0136545305999686, 0.00313938633449207, 0.000668609766731491, 0.0888869590967754, 0.00786135792169951, 0.0110926366816771, -0.0100975039286795, 0.00148441994239399, 0.0171439854069146], [0.00877653734019333, -0.00211069642574397, -0.00631727519269487, -0.00734367229783357, 0.00786135792169951, 0.0722229689090110, 0.00304212300269122, -0.00827966021609378, 0.00551573528859294, -0.00642139334638929], [0.00599850215358749, -0.0190376942032620, -0.000857192315515151, -0.00379864597533914, 0.0110926366816771, 0.00304212300269122, 0.0764745612293903, 0.00243931672852700, 0.00302583994317123, 0.00209085128228371], [-0.00348995913138712, -0.00257010773135636, -0.00675389095428766, -0.0119801680980932, -0.0100975039286795, -0.00827966021609378, 0.00243931672852700, 0.0766426612844255, 0.00618461111318457, -0.00577660398483803], [0.00246547676245725, 0.00231670739802999, 0.00233120058289521, 0.00212337629490726, 0.00148441994239399, 0.00551573528859294, 0.00302583994317123, 0.00618461111318457, 0.0833018477815933, -0.00105692043190239], [0.00666124765608796, -0.00692762180581513, 0.00603338006388508, -0.00175377705994861, 0.0171439854069146, -0.00642139334638929, 0.00209085128228371, -0.00577660398483803, -0.00105692043190239, 0.0778136453960253]])\n\nScaling Factors:\nMatrix([[0.481142294922374, 0.712869580429699, 0.453008347187940, 0.371618686227136, 0.0532302153023696, 0.602070565355414, 0.296256871350113, 0.857310812147908, 0.644627061596774, 0.570133233473511], [0.400488052197653, 0.00746048609379324, 0.109576820919843, 0.529992676082995, 0.171096264648820, 0.0909910389095920, 0.599270628207430, 0.0463124422530627, 0.134372013567503, 0.812178984225464], [0.00304250100886583, 0.252329841673121, 0.932502644044207, 0.536851768907808, 0.462267224696423, 0.253226613914513, 0.225358275148283, 0.478643220070571, 0.910126588647015, 0.886685214131960], [0.686160963295380, 0.707435006398223, 0.214558439728764, 0.911990044555208, 0.366446146722666, 0.115639409297182, 0.336703893476474, 0.321473866955686, 0.234511260784478, 0.130457857490741], [0.0851636696576064, 0.447016172780890, 0.907142065662662, 0.440223466395858, 0.0352072650879196, 0.381070343541942, 0.218935558326456, 0.652439468103513, 0.899821546865162, 0.123745421255797], [0.641822976536854, 0.439917305724979, 0.151342442268839, 0.473559645232588, 0.268596363891568, 0.511723520764182, 0.909554124052425, 0.612620892749842, 0.234329334856684, 0.908371100223171], [0.240436982959696, 0.550502066402450, 0.298718547113691, 0.301868428798287, 0.938713372756728, 0.798004434267032, 0.580249960786137, 0.165722152362160, 0.392563395084446, 0.958431333463849], [0.0496674491863637, 0.0170901451737456, 0.187698018791163, 0.0626070050479997, 0.663591667026014, 0.590431939394914, 0.898746019631316, 0.535978922701300, 0.751365210903247, 0.192829793011309], [0.477427240097150, 0.894402061804010, 0.441053965913572, 0.940275783377960, 0.306446136347248, 0.840644205752539, 0.926561421033859, 0.679794347770721, 0.867542740051959, 0.854080948545715], [0.166239072669204, 0.841910391938882, 0.500146445034615, 0.245425648887771, 0.996110451002464, 0.464311832119807, 0.247597521862156, 0.325166826855779, 0.0924745273877831, 0.250657705413593]])\n\nScaled Covariance Matrix:\nMatrix([[0.0420207734292851, 0.0611969675318363, 0.0335253771238947, 0.0306118658562910, 0.0118171519728288, 0.0543347526867781, 0.0333978705527316, 0.0660850917904174, 0.0450909195296519, 0.0539047121135366], [0.0351224520481759, -0.00996297966025056, 0.00698446212109085, 0.0508484862421518, -0.00179601801040472, -0.00820832858531321, 0.0440808463875744, 0.00229959840307002, 0.0104900834639353, 0.0706381842202303], [-0.000745510658821315, 0.0191759959919432, 0.0798459362406128, 0.0500893546123279, 0.0401675392885522, 0.0153317834081006, 0.0173889253453757, 0.0308439082415452, 0.0708044181220501, 0.0780304276973931], [0.0482425394402469, 0.0472191873997799, 0.00967524054889080, 0.0685155361911753, 0.0143644446551788, -0.00687882985768734, 0.00934620709084006, 0.00994415439975985, 0.00420634253911079, -0.00205065214032151], [0.0148422512491346, 0.0682771403251501, 0.0954598212132027, 0.0473915336049668, 0.0260116260898666, 0.0515032414813214, 0.0232675263589104, 0.0695819690093857, 0.0846577822378870, 0.0259513658935606], [0.0472292410857532, 0.0357981014163240, 0.0129155701606872, 0.0337270068626708, 0.00682554552634199, 0.0417913363071662, 0.0626953943702974, 0.0491442744315291, 0.0210645587697265, 0.0677285363950688], [0.0158505345250268, 0.0541351186373974, 0.0352224308433457, 0.0211349166423339, 0.0728977960090655, 0.0729884769710873, 0.0439797238811727, 0.0284481616324434, 0.0450042639774993, 0.0677127358082471], [-0.0107378014763886, -0.0175217427467631, -0.00619106263114202, -0.0156445423130440, 0.0385732770819845, 0.0362003135193353, 0.0567264187666568, 0.0219536778684086, 0.0407978699785008, 0.000551978904579534], [0.0478742411692451, 0.0823421956299569, 0.0444582317192076, 0.0879654888519382, 0.0353363000672125, 0.0815219591404798, 0.0929376313306465, 0.0684676641671834, 0.0851533792878168, 0.0857995412247946], [0.00923108278379400, 0.0754364924599329, 0.0600809282991071, 0.0233229045954005, 0.0755109883976855, 0.0414514020165402, 0.0108125925011040, 0.0367997905350322, 0.0251241166359193, 0.0190726565087401]])\n```\n:::\n:::\n\n\n##### Inner Product of Matrices\n\nThe inner product of two matrices is a generalized extension of the dot product, where each matrix is treated as a vector in a high-dimensional space. For two matrices $A$ and $B$ of the same dimension $m \\times n$, the inner product is defined as the sum of the element-wise products of the matrices.\n\n::: {.callout-important}\n### Definition (Inner product)\n\nFor two matrices $A$ and $B$ of dimension $m \\times n$, the inner product $\\langle A, B \\rangle$ is given by:\n\n$$\\langle A, B \\rangle = \\sum_{i=1}^{m} \\sum_{j=1}^{n} A_{ij} \\cdot B_{ij}$$\n\nwhere $\\cdot$ denotes element-wise multiplication.\n:::\n\n\n::: {.callout-important}\n### Properties\n\n1.  **Commutativity**: \n  $$\\langle A, B \\rangle = \\langle B, A \\rangle$$\n  \n2.  **Linearity**: \n  $$\\langle A + C, B \\rangle = \\langle A, B \\rangle + \\langle C, B \\rangle$$\n  \n3.  **Positive Definiteness**: \n  $$\\langle A, A \\rangle \\geq 0$$\n  with equality if and only if $A$ is a zero matrix.\n:::\n\n\nSome simple examples showing the mathematical process of calculating the inner product is given bellow.\n\n**Example 1: Basic Inner Product**\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}\n1 & 2 \\\\\n3 & 4\n\\end{pmatrix}, \\quad\nB = \\begin{pmatrix}\n5 & 6 \\\\\n7 & 8\n\\end{pmatrix}$$\n\nThe inner product $\\langle A, B \\rangle$ is:\n\n$$\\langle A, B \\rangle = 1 \\cdot 5 + 2 \\cdot 6 + 3 \\cdot 7 + 4 \\cdot 8 = 5 + 12 + 21 + 32 = 70$$\n\n**Example 2: Inner Product with Larger Matrices**\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{pmatrix}, \\quad\nB = \\begin{pmatrix}\n9 & 8 & 7 \\\\\n6 & 5 & 4 \\\\\n3 & 2 & 1\n\\end{pmatrix}$$\n\nThe inner product $\\langle A, B \\rangle$ is calculated as:\n\\begin{align*}\nlangle A, B \\rangle &= 1 \\cdot 9 + 2 \\cdot 8 + 3 \\cdot 7 + 4 \\cdot 6 + 5 \\cdot 5 + 6 \\cdot 4 + 7 \\cdot 3 + 8 \\cdot 2 + 9 \\cdot 1\\\\\n&= 9 + 16 + 21 + 24 + 25 + 24 + 21 + 16 + 9\\\\\n&= 175\n\\end{align*}\n\nNow let's look into the computational part of *inner product*.\n\n1. Compute Inner Product from Scratch (without Libraries)\n\nHere’s how you can compute the inner product from the scratch:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Define matrices A and B\nA = [[1, 2, 3], [4, 5, 6]]\nB = [[7, 8, 9], [10, 11, 12]]\n\n# Function to compute inner product\ndef inner_product(A, B):\n    # Get the number of rows and columns\n    num_rows = len(A)\n    num_cols = len(A[0])\n    \n    # Initialize the result\n    result = 0\n    \n    # Compute the inner product\n    for i in range(num_rows):\n        for j in range(num_cols):\n            result += A[i][j] * B[i][j]\n    \n    return result\n\n# Compute inner product\ninner_product_result = inner_product(A, B)\n\n# Display result\nprint(\"Inner Product (From Scratch):\")\nprint(inner_product_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (From Scratch):\n217\n```\n:::\n:::\n\n\n2. Compute Inner Product Using `NumPy`\n\nHere’s how to compute the inner product using Numpy:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nimport numpy as np\n# Define matrices A and B\nA = np.array([[1, 2, 3], [4, 5, 6]])\nB = np.array([[7, 8, 9], [10, 11, 12]])\n# calculating innerproduct\ninner_product = (A*B).sum() # calculate element-wise product, then column sum\n\nprint(\"Inner Product (Using numpy):\")\nprint(inner_product)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (Using numpy):\n217\n```\n:::\n:::\n\n\nThe same operation can be done using `NumPy` functions as follows.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nimport sympy as sp\nimport numpy as np  \n# Define matrices A and B\nA = sp.Matrix([[1, 2, 3], [4, 5, 6]])\nB = sp.Matrix([[7, 8, 9], [10, 11, 12]])\n\n# Compute element-wise product\nelementwise_product = A.multiply_elementwise(B)\n\n# Calculate sum of each column\ninner_product_sympy = np.sum(elementwise_product)\n\n# Display result\nprint(\"Inner Product (Using SymPy):\")\nprint(inner_product_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (Using SymPy):\n217\n```\n:::\n:::\n\n\nA vector dot product (in Physics) can be calculated using `SymPy` `.dot()` function as shown below. \n\nLet $A=\\begin{pmatrix}1&2&3\\end{pmatrix}$ and $B=\\begin{pmatrix}4&5&6\\end{pmatrix}$, then the dot product, $A\\cdot B$ is computed as:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nimport sympy as sp\nA=sp.Matrix([1,2,3])\nB=sp.Matrix([4,5,6])\ndisplay(A.dot(B)) # calculate fot product of A and B\n```\n\n::: {.cell-output .cell-output-display}\n```{=tex}\n$\\displaystyle 32$\n```\n:::\n:::\n\n\n:::{.callout-warning}\n## A word of caution\nIn `SymPy` , `sp.Matrix([1,2,3])` create a column vector. But `np.array([1,2,3])` creates a row vector. So be careful while applying matrix/ dot product operations on these objects.\n:::\n\nThe same dot product using `numpy` object can be done as follows:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nimport numpy as np\nA=np.array([1,2,3])\nB=np.array([4,5,6])\nA.dot(B.T)# dot() stands for dot product B.T represents the transpose of B\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nnp.int64(32)\n```\n:::\n:::\n\n\n**Practical Applications**\n\nApplication 1: Signal Processing\n\nIn signal processing, the inner product can be used to measure the similarity between two signals. Here the most popular measure of similarity is the `cosine` similarity. This measure is defined as:\n\n$$\\cos \\theta=\\dfrac{A\\cdot B}{||A|| ||B||}$$\n\nNow consider two digital signals are given. It's cosine similarity measure can be calculated with a simulated data as shown below.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nimport numpy as np\n\n# Simulated large signals (1D array) using NumPy\nsignal1 = np.sin(np.random.rand(1000))\nsignal2 = np.cos(np.random.rand(1000))\n\n# Compute inner product\ninner_product_signal = np.dot(signal1, signal2)\n#cosine_sim=np.dot(signal1,signal2)/(np.linalg.norm(signal1)*np.linalg.norm(signal2))\n# Display result\ncosine_sim=inner_product_signal/(np.sqrt(np.dot(signal1,signal1))*np.sqrt(np.dot(signal2,signal2)))\nprint(\"Inner Product (Using numpy):\")\nprint(inner_product_signal)\nprint(\"Similarity of signals:\")\nprint(cosine_sim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Product (Using numpy):\n393.2148057769319\nSimilarity of signals:\n0.8749343176536873\n```\n:::\n:::\n\n\nApplication 2: Machine Learning - Feature Similarity\n\nIn machine learning, the inner product is used to calculate the similarity between feature vectors.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nimport numpy as np\n\n# Simulated feature vectors (2D array) using NumPy\nfeatures1 = np.random.rand(100, 10)\nfeatures2 = np.random.rand(100, 10)\n\n# Compute inner product for each feature vector\ninner_products = np.einsum('ij,ij->i', features1, features2) # use Einstien's sum\n\n# Display results\nprint(\"Inner Products of Feature Vectors:\")\nprint(inner_products)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInner Products of Feature Vectors:\n[1.84381381 4.70068926 2.82570042 1.76903709 3.19620324 3.09139643\n 1.75784941 3.1210121  1.58008353 1.90509337 2.43014475 1.46655618\n 2.23291962 2.46462972 2.91354739 3.5796995  2.96882278 3.27303148\n 1.79737085 1.84023423 3.49767569 2.71891338 2.23357135 3.20411\n 3.04744104 2.83527388 1.9258229  3.66327036 1.53259473 3.10577135\n 2.56529102 1.41808607 1.90579747 2.04741341 1.82338211 3.62272612\n 1.57809679 2.93057945 3.14741926 1.94321012 2.49397098 2.97991083\n 2.87605703 1.9481557  1.99981979 2.41210277 2.79039689 3.07259007\n 2.57923224 1.86621516 2.37073791 1.76395119 2.6481807  2.60401973\n 4.23391197 2.75541936 3.9420396  3.2248663  2.11593818 3.75182275\n 0.88335981 0.73276336 3.59813623 2.1238702  2.15770941 2.56214787\n 2.54230639 3.26152953 3.08522931 2.6213125  2.71356387 1.99879275\n 2.07244487 2.92534768 2.67367056 2.04054212 1.73969267 1.46856431\n 1.57432818 3.06263486 4.32622311 1.20788357 1.64650294 2.8720248\n 3.5625786  2.06649418 1.77378488 3.21491718 1.36147814 2.10230255\n 2.53394965 1.38124011 3.08781178 2.18665345 0.83055494 3.32503011\n 2.26306816 3.0474496  2.85321622 2.56183344]\n```\n:::\n:::\n\n\nApplication 3: Covariance Matrix in Statistics\n\nThe inner product can be used to compute covariance matrices for statistical data analysis. If $X$ is a given distribution and $x=X-\\bar{X}$. Then the covariance of $X$ can be calculated as $cov(X)=\\dfrac{1}{n-1}(x\\cdot x^T)$ ^[Remember that the covariance of $X$ is defined as $Cov(X)=\\dfrac{\\sum (X-\\bar{X})^2}{n-1}$]. The python code a simulated data is shown below.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nimport sympy as sp\nimport numpy as np\n\n# Simulated large dataset (2D array) using NumPy\ndata = np.random.rand(100, 10)\n\n# Compute the mean of each column\nmean = np.mean(data, axis=0)\n\n# Center the data\ncentered_data = data - mean\n\n# Compute the covariance matrix using matrix product operation\ncov_matrix = (centered_data.T @ centered_data) / (centered_data.shape[0] - 1)\ncov_matrix_sympy = sp.Matrix(cov_matrix)\n\n# Display results\nprint(\"Covariance Matrix:\")\nprint(cov_matrix_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCovariance Matrix:\nMatrix([[0.0706674268348508, -0.00112414423257797, -0.00186383780806302, -0.00374658940555941, 0.00188607435791168, 0.00230395954896077, 0.00448181470507251, 0.00349953400110314, -0.00359306624954373, -0.00899015286692193], [-0.00112414423257797, 0.0747630443946097, 0.000257257594538110, -0.00473209891747444, -0.00832263422003052, 0.000874127435311754, -0.00460644238925671, 0.0133631609743981, 0.00654004397033743, -0.00696156894913003], [-0.00186383780806302, 0.000257257594538110, 0.0824093998679989, 0.0132294269634100, 0.00468022607636048, -0.00181856820642834, 0.00235283032511703, 0.00169138202345031, -0.0109298620487464, -0.0110671122052228], [-0.00374658940555941, -0.00473209891747444, 0.0132294269634100, 0.0619539927949305, 0.00927860071817093, -0.00782671433378325, 0.00797558905059964, -0.00240876824083086, -0.0110136461273490, -0.000186610472639657], [0.00188607435791168, -0.00832263422003052, 0.00468022607636048, 0.00927860071817093, 0.0792481293267828, 0.00672736414389722, 0.0295417380316116, 0.00333281582232095, -0.0153043475024624, -0.00516856785858163], [0.00230395954896077, 0.000874127435311754, -0.00181856820642834, -0.00782671433378325, 0.00672736414389722, 0.0832703585973260, -0.00620484058814817, -0.0169673871022828, -0.00547450670030478, -0.0125563953736336], [0.00448181470507251, -0.00460644238925671, 0.00235283032511703, 0.00797558905059964, 0.0295417380316116, -0.00620484058814817, 0.0842889031026773, -0.00273586412336357, 0.00638795553755099, -0.0114650810085628], [0.00349953400110314, 0.0133631609743981, 0.00169138202345031, -0.00240876824083086, 0.00333281582232095, -0.0169673871022828, -0.00273586412336357, 0.0776249184450217, 0.00305528932479989, 0.000531349677573958], [-0.00359306624954373, 0.00654004397033743, -0.0109298620487464, -0.0110136461273490, -0.0153043475024624, -0.00547450670030478, 0.00638795553755099, 0.00305528932479989, 0.0869445251223749, -0.00823596813954152], [-0.00899015286692193, -0.00696156894913003, -0.0110671122052228, -0.000186610472639657, -0.00516856785858163, -0.0125563953736336, -0.0114650810085628, 0.000531349677573958, -0.00823596813954152, 0.0735013999129981]])\n```\n:::\n:::\n\n\nThese examples demonstrate the use of inner product and dot product in various applications.\n\n#### Outer Product\n\nThe outer product of two vectors results in a matrix, and it is a way to combine these vectors into a higher-dimensional representation.\n\n:::{.callout-note}\n\n### Definition (Outer Product)\n\nFor two vectors $\\mathbf{u}$ and $\\mathbf{v}$ of dimensions $m$ and $n$ respectively, the outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is an $m \\times n$ matrix defined as:\n\n$$(\\mathbf{u} \\otimes \\mathbf{v})_{ij} = u_i \\cdot v_j$$\n\nwhere $\\cdot$ denotes the outer product operation. In matrix notation, for two column vectors $u,v$, \n$$u\\otimes v=uv^T$$\n:::\n\n\n:::{.callout-note}\n### Properties\n\n1.  **Linearity**:\n  $$(\\mathbf{u} + \\mathbf{w}) \\otimes \\mathbf{v} = (\\mathbf{u} \\otimes \\mathbf{v}) + (\\mathbf{w} \\otimes \\mathbf{v})$$\n  \n2.  **Distributivity**:\n  $$\\mathbf{u} \\otimes (\\mathbf{v} + \\mathbf{w}) = (\\mathbf{u} \\otimes \\mathbf{v}) + (\\mathbf{u} \\otimes \\mathbf{w})$$\n  \n3.  **Associativity**:\n  $$(\\mathbf{u} \\otimes \\mathbf{v}) \\otimes \\mathbf{w} = \\mathbf{u} \\otimes (\\mathbf{v} \\otimes \\mathbf{w})$$\n\n:::\n\nSome simple examples of outer product is given below.\n\n**Example 1: Basic Outer Product**\n\nGiven vectors:\n\n$$\\mathbf{u} = \\begin{pmatrix}\n1 \\\\\n2\n\\end{pmatrix}, \\quad\n\\mathbf{v} = \\begin{pmatrix}\n3 \\\\\n4 \\\\\n5\\end{pmatrix}$$\n\nThe outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{pmatrix}\n1 \\cdot 3 & 1 \\cdot 4 & 1 \\cdot 5 \\\\\n2 \\cdot 3 & 2 \\cdot 4 & 2 \\cdot 5\n\\end{pmatrix} = \\begin{pmatrix}\n3 & 4 & 5 \\\\\n6 & 8 & 10\n\\end{pmatrix}$$\n\n**Example 2: Outer Product with Larger Vectors**\n\nGiven vectors:\n$$\\mathbf{u} = \\begin{pmatrix}\n1 \\\\\n2 \\\\\n3\n\\end{pmatrix}, \\quad\n\\mathbf{v} = \\begin{pmatrix}\n4 \\\\\n5\n\\end{pmatrix}$$\n\nThe outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{pmatrix}\n1 \\cdot 4 & 1 \\cdot 5 \\\\\n2 \\cdot 4 & 2 \\cdot 5 \\\\\n3 \\cdot 4 & 3 \\cdot 5\n\\end{pmatrix} = \\begin{pmatrix}\n4 & 5 \\\\\n8 & 10 \\\\\n12 & 15\n\\end{pmatrix}$$\n\n**1. Compute Outer Product of Vectors from Scratch (without Libraries)**\n\nHere’s how you can compute the outer product manually:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Define vectors u and v\nu = [1, 2]\nv = [3, 4, 5]\n\n# Function to compute outer product\ndef outer_product(u, v):\n    # Initialize the result\n    result = [[a * b for b in v] for a in u]\n    return result\n\n# Compute outer product\nouter_product_result = outer_product(u, v)\n\n# Display result\nprint(\"Outer Product of Vectors (From Scratch):\")\nfor row in outer_product_result:\n    print(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of Vectors (From Scratch):\n[3, 4, 5]\n[6, 8, 10]\n```\n:::\n:::\n\n\n**2. Compute Outer Product of Vectors Using SymPy**\n\nHere’s how to compute the outer product using `SymPy`:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nimport sympy as sp\n\n# Define vectors u and v\nu = sp.Matrix([1, 2])\nv = sp.Matrix([3, 4, 5])\n\n# Compute outer product using SymPy\nouter_product_sympy = u * v.T\n\n# Display result\nprint(\"Outer Product of Vectors (Using SymPy):\")\nprint(outer_product_sympy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of Vectors (Using SymPy):\nMatrix([[3, 4, 5], [6, 8, 10]])\n```\n:::\n:::\n\n\n**Outer Product of Matrices**\n \nThe outer product of two matrices extends the concept from vectors to higher-dimensional tensors. For two matrices $A$ and $B$, the outer product results in a higher-dimensional tensor and is generally expressed as block matrices.\n\n:::{.callout-note}\n### Definition (Outer Product of Matrices)\n\nFor two matrices $A$ of dimension $m \\times p$ and $B$ of dimension $q \\times n$, the outer product $A \\otimes B$ results in a tensor of dimension $m \\times q \\times p \\times n$. The entries of the tensor are given by:\n\n$$(A \\otimes B)_{ijkl} = A_{ij} \\cdot B_{kl}$$\n\nwhere $\\cdot$ denotes the outer product operation.\n:::\n\n:::{.callout-note}\n\n### Properties\n\n1.  **Linearity**:\n  $$(A + C) \\otimes B = (A \\otimes B) + (C \\otimes B)$$\n  \n2.  **Distributivity**:\n  $$A \\otimes (B + D) = (A \\otimes B) + (A \\otimes D)$$\n  \n3. **Associativity**:\n\n  $$(A \\otimes B) \\otimes C = A \\otimes (B \\otimes C)$$\n:::\n\nHere are some simple examples to demonstrate the mathematical procedure to find outer product of matrices.\n\n**Example 1: Basic Outer Product of Matrices**\n\nGiven matrices:\n$$\nA = \\begin{pmatrix}\n1 & 2 \\\\\n3 & 4\n\\end{pmatrix}, \\quad\nB = \\begin{pmatrix}\n5 \\\\\n6\n\\end{pmatrix}$$\n\nThe outer product $A \\otimes B$ is:\n\n$$A \\otimes B = \\begin{pmatrix}\n1 \\cdot 5 & 1 \\cdot 6 \\\\\n2 \\cdot 5 & 2 \\cdot 6 \\\\\n3 \\cdot 5 & 3 \\cdot 6 \\\\\n4 \\cdot 5 & 4 \\cdot 6\n\\end{pmatrix} = \\begin{pmatrix}\n5 & 6 \\\\\n10 & 12 \\\\\n15 & 18 \\\\\n20 & 24\n\\end{pmatrix}$$\n\n**Example 2: Outer Product with Larger Matrices**\n\nGiven matrices:\n\n$$A = \\begin{pmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6\n\\end{pmatrix}, \\quad\nB = \\begin{pmatrix}\n7 \\\\\n8\n\\end{pmatrix}$$\n\nThe outer product $A \\otimes B$ is:\n\n$$A \\otimes B = \\begin{pmatrix}\n1 \\cdot 7 & 1 \\cdot 8 \\\\\n2 \\cdot 7 & 2 \\cdot 8 \\\\\n3 \\cdot 7 & 3 \\cdot 8 \\\\\n4 \\cdot 7 & 4 \\cdot 8 \\\\\n5 \\cdot 7 & 5 \\cdot 8 \\\\\n6 \\cdot 7 & 6 \\cdot 8\n\\end{pmatrix} = \\begin{pmatrix}\n7 & 8 \\\\\n14 & 16 \\\\\n21 & 24 \\\\\n28 & 32 \\\\\n35 & 40 \\\\\n42 & 48\n\\end{pmatrix}$$\n\n**Example 3: Compute the outer product of the following vectors $\\mathbf{u} = [0, 1, 2]$ and $\\mathbf{v} = [2, 3, 4]$.\n\nTo find the outer product, we calculate each element $(i, j)$ as the product of the $(i)$-th element of $\\mathbf{u}$ and the $(j)$-th element of $\\mathbf{v}$. Mathematically:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{bmatrix}\n0 \\cdot 2 & 0 \\cdot 3 & 0 \\cdot 4 \\\\\n1 \\cdot 2 & 1 \\cdot 3 & 1 \\cdot 4 \\\\\n2 \\cdot 2 & 2 \\cdot 3 & 2 \\cdot 4\n\\end{bmatrix}\n= \\begin{bmatrix}\n0 & 0 & 0 \\\\\n2 & 3 & 4 \\\\\n4 & 6 & 8\n\\end{bmatrix}$$\n\n**1. Compute Outer Product of Matrices from Scratch (without Libraries)**\n\nHere’s how you can compute the outer product manually:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# Define matrices A and B\nA = [[1, 2], [3, 4]]\nB = [[5], [6]]\n\n# Function to compute outer product\ndef outer_product_matrices(A, B):\n    m = len(A)\n    p = len(A[0])\n    q = len(B)\n    n = len(B[0])\n    result = [[0] * (n * p) for _ in range(m * q)]\n\n    for i in range(m):\n        for j in range(p):\n            for k in range(q):\n                for l in range(n):\n                    result[i*q + k][j*n + l] = A[i][j] * B[k][l]\n\n    return result\n\n# Compute outer product\nouter_product_result_matrices = outer_product_matrices(A, B)\n\n# Display result\nprint(\"Outer Product of Matrices (From Scratch):\")\nfor row in outer_product_result_matrices:\n    print(row)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of Matrices (From Scratch):\n[5, 10]\n[6, 12]\n[15, 20]\n[18, 24]\n```\n:::\n:::\n\n\nHere is the Python code to compute the outer product of these vectors using the `NumPy` function `.outer()`:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nimport numpy as np\n\n# Define vectors\nu = np.array([[1,2],[3,4]])\nv = np.array([[5],[4]])\n\n# Compute outer product\nouter_product = np.outer(u, v)\n\nprint(\"Outer Product of u and v:\")\nprint(outer_product)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product of u and v:\n[[ 5  4]\n [10  8]\n [15 12]\n [20 16]]\n```\n:::\n:::\n\n\n**Example 3: Real-world Application in Recommendation Systems**\n\nIn recommendation systems, the outer product can represent user-item interactions. A simple context is here. Let the user preferences of items is given as $u=[4, 3, 5]$ and the item scores is given by $v=[2, 5, 4]$. Now the recommendation score can be calculated as the outer product of these two vectors. Calculation of this score is shown below.\nThe outer product $\\mathbf{u} \\otimes \\mathbf{v}$ is calculated as follows:\n\n$$\\mathbf{u} \\otimes \\mathbf{v} = \\begin{bmatrix}\n4 \\cdot 2 & 4 \\cdot 5 & 4 \\cdot 4 \\\\\n3 \\cdot 2 & 3 \\cdot 5 & 3 \\cdot 4 \\\\\n5 \\cdot 2 & 5 \\cdot 5 & 5 \\cdot 4\n\\end{bmatrix}\n= \\begin{bmatrix}\n8 & 20 & 16 \\\\\n6 & 15 & 12 \\\\\n10 & 25 & 20\n\\end{bmatrix}$$\n\nThe python code for this task is given below.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the user and product ratings vectors\nuser_ratings = np.array([4, 3, 5])\nproduct_ratings = np.array([2, 5, 4])\n\n# Compute the outer product\npredicted_ratings = np.outer(user_ratings, product_ratings)\n\n# Print the predicted ratings matrix\nprint(\"Predicted Ratings Matrix:\")\nprint(predicted_ratings)\n\n# Plot the result\nplt.imshow(predicted_ratings, cmap='coolwarm', interpolation='nearest')\nplt.colorbar()\nplt.title('Predicted Ratings Matrix (Recommendation System)')\nplt.xlabel('Product Ratings')\nplt.ylabel('User Ratings')\nplt.xticks(ticks=np.arange(len(product_ratings)), labels=product_ratings)\nplt.yticks(ticks=np.arange(len(user_ratings)), labels=user_ratings)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted Ratings Matrix:\n[[ 8 20 16]\n [ 6 15 12]\n [10 25 20]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-29-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::{.callout-note}\n### Additional Properties & Definitions\n\n1. **Definition and Properties**\n\n   Given two vectors:\n   - $\\mathbf{u} \\in \\mathbb{R}^m$\n   - $\\mathbf{v} \\in \\mathbb{R}^n$\n\n   The outer product $\\mathbf{u} \\otimes \\mathbf{v}$ results in an $m \\times n$ matrix where each element $(i, j)$ of the matrix is calculated as:\n   $$(\\mathbf{u} \\otimes \\mathbf{v})_{ij} = u_i \\cdot v_j$$\n\n2. **Non-Symmetry**\n\n   The outer product is generally not symmetric. For vectors $\\mathbf{u}$ and $\\mathbf{v}$, the matrix $\\mathbf{u} \\otimes \\mathbf{v}$ is not necessarily equal to $\\mathbf{v} \\otimes \\mathbf{u}$:\n   $$\\mathbf{u} \\otimes \\mathbf{v} \\neq \\mathbf{v} \\otimes \\mathbf{u}$$\n\n3. **Rank of the Outer Product**\n\n   The rank of the outer product matrix $\\mathbf{u} \\otimes \\mathbf{v}$ is always 1, provided neither $\\mathbf{u}$ nor $\\mathbf{v}$ is a zero vector. This is because the matrix can be expressed as a single rank-1 matrix.\n\n4. **Distributive Property**\n\n   The outer product is distributive over vector addition. For vectors $\\mathbf{u}_1, \\mathbf{u}_2 \\in \\mathbb{R}^m$ and $\\mathbf{v} \\in \\mathbb{R}^n$:\n   $$(\\mathbf{u}_1 + \\mathbf{u}_2) \\otimes \\mathbf{v} = (\\mathbf{u}_1 \\otimes \\mathbf{v}) + (\\mathbf{u}_2 \\otimes \\mathbf{v})$$\n\n5. **Associativity with Scalar Multiplication**\n\n   The outer product is associative with scalar multiplication. For a scalar $\\alpha$ and vectors $\\mathbf{u} \\in \\mathbb{R}^m$ and $\\mathbf{v} \\in \\mathbb{R}^n$:\n   $$\\alpha (\\mathbf{u} \\otimes \\mathbf{v}) = (\\alpha \\mathbf{u}) \\otimes \\mathbf{v} = \\mathbf{u} \\otimes (\\alpha \\mathbf{v})$$\n\n6. **Matrix Trace**\n\n   The trace of the outer product of two vectors is given by:\n   $$\\text{tr}(\\mathbf{u} \\otimes \\mathbf{v}) = (\\mathbf{u}^T \\mathbf{v}) \\cdot (\\mathbf{v}^T \\mathbf{u})$$\n   Here, $\\text{tr}$ denotes the trace of a matrix, which is the sum of its diagonal elements.\n\n7. **Matrix Norm**\n\n   The Frobenius norm of the outer product matrix can be expressed in terms of the norms of the original vectors:\n   $$\\| \\mathbf{u} \\otimes \\mathbf{v} \\|_F = \\| \\mathbf{u} \\|_2 \\cdot \\| \\mathbf{v} \\|_2$$\n   where $\\| \\cdot \\|_2$ denotes the Euclidean norm.\n\n:::\n\n**Example Calculation in Python**\n\nHere’s how to compute and visualize the outer product properties using Python:\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define vectors\nu = np.array([1, 2, 3])\nv = np.array([4, 5])\n\n# Compute outer product\nouter_product = np.outer(u, v)\n\n# Display results\nprint(\"Outer Product Matrix:\")\nprint(outer_product)\n\n# Compute and display rank\nrank = np.linalg.matrix_rank(outer_product)\nprint(f\"Rank of Outer Product Matrix: {rank}\")\n\n# Compute Frobenius norm\nfrobenius_norm = np.linalg.norm(outer_product, 'fro')\nprint(f\"Frobenius Norm: {frobenius_norm}\")\n\n# Plot the result\nplt.imshow(outer_product, cmap='viridis', interpolation='nearest')\nplt.colorbar()\nplt.title('Outer Product Matrix')\nplt.xlabel('Vector v')\nplt.ylabel('Vector u')\nplt.xticks(ticks=np.arange(len(v)), labels=v)\nplt.yticks(ticks=np.arange(len(u)), labels=u)\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOuter Product Matrix:\n[[ 4  5]\n [ 8 10]\n [12 15]]\nRank of Outer Product Matrix: 1\nFrobenius Norm: 23.958297101421877\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](module_2_files/figure-pdf/cell-30-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n#### Kronecker Product\n\nIn mathematics, the Kronecker product, sometimes denoted by $\\otimes$, is an operation on two matrices of arbitrary size resulting in a *block matrix*. It is a specialization of the tensor product (which is denoted by the same symbol) from vectors to matrices and gives the matrix of the tensor product linear map with respect to a standard choice of basis. The Kronecker product is to be distinguished from the usual matrix multiplication, which is an entirely different operation. The Kronecker product is also sometimes called *matrix direct product*.\n\n:::{.callout-note}\nIf $A$ is an $m \\times n$ matrix and $B$ is a $p \\times q$ matrix, then the Kronecker product $A\\otimes B$ is the $pm \\times qn$ block matrix defined as: Each\n$a_{ij}$ of $A$ is replaced by the matrix $a_{ij}B$. Symbolically this will result in a block matrix defined by:\n\n$$A\\otimes B=\\begin{bmatrix}A \\otimes B = \\begin{bmatrix}\na_{11}B & a_{12}B & \\cdots & a_{1n}B \\\\\na_{21}B & a_{22}B & \\cdots & a_{2n}B \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\na_{m1}B & a_{m2}B & \\cdots & a_{mn}B\n\\end{bmatrix} \\end{bmatrix}$$\n:::\n\n:::{.callout-note}\n\n#### Properties of the Kronecker Product\n\n1. **Associativity**\n\n   The Kronecker product is associative. For matrices $A \\in \\mathbb{R}^{m \\times n}$, $B \\in \\mathbb{R}^{p \\times q}$, and $C \\in \\mathbb{R}^{r \\times s}$:\n   $$(A \\otimes B) \\otimes C = A \\otimes (B \\otimes C)$$\n\n2. **Distributivity Over Addition**\n\n   The Kronecker product distributes over matrix addition. For matrices $A \\in \\mathbb{R}^{m \\times n}$, $B \\in \\mathbb{R}^{p \\times q}$, and $C \\in \\mathbb{R}^{p \\times q}$:\n   $$A \\otimes (B + C) = (A \\otimes B) + (A \\otimes C)$$\n\n3. **Mixed Product Property**\n\n   The Kronecker product satisfies the mixed product property with the matrix product. For matrices $A \\in \\mathbb{R}^{m \\times n}$, $B \\in \\mathbb{R}^{p \\times q}$, $C \\in \\mathbb{R}^{r \\times s}$, and $D \\in \\mathbb{R}^{r \\times s}$:\n   $$(A \\otimes B) (C \\otimes D) = (A C) \\otimes (B D)$$\n\n4. **Transpose**\n\n   The transpose of the Kronecker product is given by:\n   $$(A \\otimes B)^T = A^T \\otimes B^T$$\n\n5. **Norm**\n\n   The Frobenius norm of the Kronecker product can be computed as:\n  $$\\| A \\otimes B \\|_F = \\| A \\|_F \\cdot \\| B \\|_F$$\n   where $\\| \\cdot \\|_F $ denotes the Frobenius norm.\n  :::\n\n:::{.callout-tip}\n\n### Frobenius Norm\n\nThe Frobenius norm, also known as the Euclidean norm for matrices, is a measure of a matrix's magnitude. It is defined as the square root of the sum of the absolute squares of its elements. Mathematically, for a matrix $A$ with elements $a_{ij}$, the Frobenius norm is given by:\n\n$$\\|A\\|_F = \\sqrt{\\sum_{i,j} |a_{ij}|^2}$$\n:::\n\nExample 1: Calculation of Frobenius Norm\n\nConsider the matrix $A$:\n\n$$A = \\begin{bmatrix}\n1 & 2 \\\\\n3 & 4\n\\end{bmatrix}$$\n\nTo compute the Frobenius norm:\n\n$$\\|A\\|_F = \\sqrt{1^2 + 2^2 + 3^2 + 4^2}\n= \\sqrt{1 + 4 + 9 + 16}\n= \\sqrt{30}\n\\approx 5.48$$\n\nExample 2: Frobenius Norm of a Sparse Matrix\n\nConsider the sparse matrix $B$:\n\n$$B = \\begin{bmatrix}\n0 & 0 & 0 \\\\\n0 & 5 & 0 \\\\\n0 & 0 & 0\n\\end{bmatrix}$$\n\nTo compute the Frobenius norm:\n\n$$\\|B\\|_F = \\sqrt{0^2 + 0^2 + 0^2 + 5^2 + 0^2 + 0^2}\n= \\sqrt{25}\n= 5$$\n\nExample 3: Frobenius Norm in a Large Matrix\n\nConsider the matrix $C$ of size $3 \\times 3 $:\n\n$$C = \\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}$$\n\nTo compute the Frobenius norm:\n\n\\begin{align*}\n\\|C\\|_F &= \\sqrt{1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2}\\\\\n&= \\sqrt{1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81}\n&= \\sqrt{285}\n&\\approx 16.88\n\\end{align*}\n\n**Applications of the Frobenius Norm**\n\n- *Application 1: Image Compression:* In image processing, the Frobenius norm can measure the difference between the original and compressed images, indicating how well the compression has preserved the original image quality.\n\n- *Application 2: Matrix Factorization:* In numerical analysis, Frobenius norm is used to evaluate the error in matrix approximations, such as in Singular Value Decomposition (SVD). A lower Frobenius norm of the error indicates a better approximation.\n\n- *Application 3: Error Measurement in Numerical Solutions:* In solving systems of linear equations, the Frobenius norm can be used to measure the error between the true solution and the computed solution, providing insight into the accuracy of numerical methods.\n\nThe `linalg` sub module of `NumPy` library can be used to calculate various norms. Basically norm is the generalized form of Euclidean distance.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nimport numpy as np\n\n# Example 1: Simple Matrix\nA = np.array([[1, 2], [3, 4]])\nfrobenius_norm_A = np.linalg.norm(A, 'fro')\nprint(f\"Frobenius Norm of A: {frobenius_norm_A:.2f}\")\n\n# Example 2: Sparse Matrix\nB = np.array([[0, 0, 0], [0, 5, 0], [0, 0, 0]])\nfrobenius_norm_B = np.linalg.norm(B, 'fro')\nprint(f\"Frobenius Norm of B: {frobenius_norm_B:.2f}\")\n\n# Example 3: Large Matrix\nC = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfrobenius_norm_C = np.linalg.norm(C, 'fro')\nprint(f\"Frobenius Norm of C: {frobenius_norm_C:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrobenius Norm of A: 5.48\nFrobenius Norm of B: 5.00\nFrobenius Norm of C: 16.88\n```\n:::\n:::\n\n\n**Frobenius norm of Kronecker product**\n\nLet us consider two matrices,\n\n$$A = \\begin{bmatrix}\n1 & 2 \\\\\n3 & 4\n\\end{bmatrix}$$\n\nand\n\n$$B = \\begin{bmatrix}\n0 & 5 \\\\\n6 & 7\n\\end{bmatrix}$$\n\nThe Kronecker product $C = A \\otimes B$ is:\n\n$$C = \\begin{bmatrix}\n1 \\cdot B & 2 \\cdot B \\\\\n3 \\cdot B & 4 \\cdot B\n\\end{bmatrix}\n= \\begin{bmatrix}\n\\begin{bmatrix}\n0 & 5 \\\\\n6 & 7\n\\end{bmatrix} & \\begin{bmatrix}\n0 \\cdot 2 & 5 \\cdot 2 \\\\\n6 \\cdot 2 & 7 \\cdot 2\n\\end{bmatrix} \\\\\n\\begin{bmatrix}\n0 \\cdot 3 & 5 \\cdot 3 \\\\\n6 \\cdot 3 & 7 \\cdot 3\n\\end{bmatrix} & \\begin{bmatrix}\n0 \\cdot 4 & 5 \\cdot 4 \\\\\n6 \\cdot 4 & 7 \\cdot 4\n\\end{bmatrix}\n\\end{bmatrix}$$\n\nThis expands to:\n\n$$C = \\begin{bmatrix}\n0 & 5 & 0 & 10 \\\\\n6 & 7 & 12 & 14 \\\\\n0 & 15 & 0 & 20 \\\\\n18 & 21 & 24 & 28\n\\end{bmatrix}$$\n\n*Computing the Frobenius Norm*\n\nTo compute the Frobenius norm of $C$:\n\n$$\\|C\\|_F = \\sqrt{\\sum_{i=1}^{4} \\sum_{j=1}^{4} |c_{ij}|^2}$$\n\n$$\\|C\\|_F = \\sqrt{0^2 + 5^2 + 0^2 + 10^2 + 6^2 + 7^2 + 12^2 + 14^2 + 0^2 + 15^2 + 0^2 + 20^2 + 18^2 + 21^2 + 24^2 + 28^2}$$\n\n$$\\|C\\|_F = \\sqrt{0 + 25 + 0 + 100 + 36 + 49 + 144 + 196 + 0 + 225 + 0 + 400 + 324 + 441 + 576 + 784}$$\n\n$$\\|C\\|_F = \\sqrt{2896}$$\n$$\\|C\\|_F \\approx 53.87$$\n\n",
    "supporting": [
      "module_2_files\\figure-pdf"
    ],
    "filters": []
  }
}